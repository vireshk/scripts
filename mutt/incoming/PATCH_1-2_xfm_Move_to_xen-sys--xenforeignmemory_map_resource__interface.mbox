From vireshk  Thu Apr 28 07:15:55 2022
Delivered-To: viresh.kumar@linaro.org
Received: from pop.gmail.com [74.125.24.108] 	by vireshk-i7 with POP3 (fetchmail-6.4.2) 	for <vireshk@localhost> (single-drop); Thu, 28 Apr 2022 07:15:55 +0530 (IST)
Received: by 2002:a6b:d608:0:0:0:0:0 with SMTP id w8csp5076143ioa;         Wed, 27 Apr 2022 16:19:35 -0700 (PDT)
X-Received: by 2002:a17:90a:9901:b0:1cb:aa19:5eee with SMTP id b1-20020a17090a990100b001cbaa195eeemr36030769pjp.158.1651101575831;         Wed, 27 Apr 2022 16:19:35 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; t=1651101575; cv=none;         d=google.com; s=arc-20160816;         b=lvNMr5KNuODNIAG6PJm5o2mUeHdVK6Vasm0x91pG8h0UEVC8JdR81+j0whSHusqm+q          O0G0gDCSQXQYfjVcgUtjBaz1FOUpc9hPWi/JvVDeopkCEii+pJ8hYl9XaXgISEeWBetF          175P3Fa1LlXGfunsRbAPoHHIcDu4MWZsgIJI8DSzXOd+EJ5SVJV/lJK/y3g4d8yqLlbG          74EIpwT8q75ylb++7QvXItB8KImWOc+cZBt1M6MLrpKgam+q8UyHiHtyXwu+esDYNb0c          vPb/mJ5fUpWXD745cfwCLoqAvbqxNYCGTpASwniVWZcxSb+7Y+V6+blBdm3pgHzq7mmN          jMaA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;         h=content-transfer-encoding:mime-version:references:in-reply-to          :message-id:date:subject:cc:to:from:dkim-signature;         bh=KQOGMOvypZpyMH+phwZqpe91cZy+J2s36xJV0Is2iLo=;         b=I9bYGvKjMjLyZZNJEzimY8qBhKE4prsDqL4v2TcUi0vqiUb4rAsq0kIHC4S5ilgqx3          5aWyAU24cm5lQLdSh0wfMsCzAR9bqxx4Tx/CzEX/8pSNFGO0gItXgzP3QWEJZmRlG1+j          MEBO3PGs1axlsTiszrXree6CqZlqmdPe1Eh6EivXf0Not5fMA1fYVN+odWHqz/BiLkhM          g+s6ZGLs1XKf9jjfUq1xZY/SEzqBKEZXMIEQIXWNhTyCWn+l8TO43Uz7uZ7wsn/X6BcA          /akRLVp0d3qIoLdwT1MCkUhHwsONAULql1PdJ26oxDfux7SKwXmPEDaB1+o2vdMuovch          EwUA==
ARC-Authentication-Results: i=1; mx.google.com;        dkim=pass header.i=@linaro.org header.s=google header.b=ebmoQJfv;        spf=pass (google.com: domain of mathieu.poirier@linaro.org designates 209.85.220.41 as permitted sender) smtp.mailfrom=mathieu.poirier@linaro.org;        dmarc=pass (p=NONE sp=NONE dis=NONE) header.from=linaro.org
Return-Path: <mathieu.poirier@linaro.org>
Received: from mail-sor-f41.google.com (mail-sor-f41.google.com. [209.85.220.41])         by mx.google.com with SMTPS id 134-20020a63018c000000b003aaba2c3a1dsor1464610pgb.81.2022.04.27.16.19.35         for <viresh.kumar@linaro.org>         (Google Transport Security);         Wed, 27 Apr 2022 16:19:35 -0700 (PDT)
Received-SPF: pass (google.com: domain of mathieu.poirier@linaro.org designates 209.85.220.41 as permitted sender) client-ip=209.85.220.41;
Authentication-Results: mx.google.com;        dkim=pass header.i=@linaro.org header.s=google header.b=ebmoQJfv;        spf=pass (google.com: domain of mathieu.poirier@linaro.org designates 209.85.220.41 as permitted sender) smtp.mailfrom=mathieu.poirier@linaro.org;        dmarc=pass (p=NONE sp=NONE dis=NONE) header.from=linaro.org
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;         d=linaro.org; s=google;         h=from:to:cc:subject:date:message-id:in-reply-to:references          :mime-version:content-transfer-encoding;         bh=KQOGMOvypZpyMH+phwZqpe91cZy+J2s36xJV0Is2iLo=;         b=ebmoQJfva9kZWMCpEA6XX/rWSSm8md2bTvRWvVmTDsuzM79IHfYez2TtLSeFCOYBbU          83+dZq5W2vpvdCiZArSQFY9B+2Viol3pvn8uCgtl5NyrClQdxbs7ZRC0Rr1mWKL00d8i          nVaCSyNOHZcmvW81hlR366PsGFDuNrIj+LDFpU4e5Y+atS/IhHiEnV16GQ5WK83Js0eW          XzctFuPSKslZwo1lBIzt284S8hf4VbKRzzIBh9gWKFmjXG3zASrdaAF9o9txptIGXfOa          mvISTY3PU1yPBZDYb6Qr2RBP1EX8tDh63oWU3+669DLZoQM0HDxgaUlm+BPyXOVVevuQ          Pbzw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;         d=1e100.net; s=20210112;         h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to          :references:mime-version:content-transfer-encoding;         bh=KQOGMOvypZpyMH+phwZqpe91cZy+J2s36xJV0Is2iLo=;         b=GA264rginZXyNjw+6/kkvBwMnm4qsqFxzkyFCx2hMyZCaxZSjOiI2Ouo+/hdVJFAZg          WVAdCGYZSxyWeX9/KcuoUnwGFLXE30as9z50cad2HS7pXaFI08XbC73XJ3rvW0qtKlIn          CtJcce4tKYF08EvoJa4xqL+NT/tRl12UlKY03FskDVn1VGlC3pRzmAN7Sag85FxH9ihV          vOo2AX/VgjW01MwnyBGN02XKx/k1tDhRSInY/NX2kr+uiBTNIjqHpGJp3HtdhKnQCow0          cgfebkq6oxowSBzQv92zons6Z0ILbzkVzdQzBygDjgSAzipjvGbCdtWSmbQ/JM0b262k          NudQ==
X-Gm-Message-State: AOAM530cKJQPxPxAqdvWzviMF6gNL4NaqrRgxm+iGeJOhooRkCLLDQGU 	2TZBSAAHjQ61aajIiEVRp5HBkcRz9wtq2igh
X-Google-Smtp-Source: ABdhPJzQo+l9kE9bCYiwrhAkznm+QXyc18X7W8fYWfn2ZBpxRm9a3BID3lOrAaxiG5rsHxlEZmvuyw==
X-Received: by 2002:a63:5b14:0:b0:39c:d7d5:722e with SMTP id p20-20020a635b14000000b0039cd7d5722emr25710700pgb.478.1651101574730;         Wed, 27 Apr 2022 16:19:34 -0700 (PDT)
Return-Path: <mathieu.poirier@linaro.org>
Received: from p14s.cg.shawcable.net (S0106889e681aac74.cg.shawcable.net. [68.147.0.187])         by smtp.gmail.com with ESMTPSA id q9-20020a056a00088900b004fe1a045e97sm20827137pfj.118.2022.04.27.16.19.32         (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);         Wed, 27 Apr 2022 16:19:33 -0700 (PDT)
From: Mathieu Poirier <mathieu.poirier@linaro.org>
To: viresh.kumar@linaro.org
Cc: alex.bennee@linaro.org, 	mathieu.poirier@linaro.org
Subject: [PATCH 1/2] xfm: Move to xen-sys::xenforeignmemory_map_resource() interface
Date: Wed, 27 Apr 2022 17:19:29 -0600
Message-Id: <20220427231930.2234276-2-mathieu.poirier@linaro.org>
X-Mailer: git-send-email 2.25.1
In-Reply-To: <20220427231930.2234276-1-mathieu.poirier@linaro.org>
References: <20220427231930.2234276-1-mathieu.poirier@linaro.org>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Length: 3210
Lines: 97

Signed-off-by: Mathieu Poirier <mathieu.poirier@linaro.org>
---
 src/xfm.rs | 66 ++++++++++++++++++++++++++----------------------------
 1 file changed, 32 insertions(+), 34 deletions(-)

diff --git a/src/xfm.rs b/src/xfm.rs
index 566fd8042b41..9b1837a14391 100644
--- a/src/xfm.rs
+++ b/src/xfm.rs
@@ -10,10 +10,13 @@ use std::slice;
 
 use super::{Error, Result};
 use libxen_sys::*;
+use xen_ioctls::xfm::xfm::xenforeignmemory_map_resource as xenforeignmemory_map_resource_ng;
+use xen_ioctls::xfm::xfm::xenforeignmemory_unmap_resource as xenforeignmemory_unmap_resource_ng;
+use xen_ioctls::xfm::xfm_types::XenForeignMemoryResourceHandle;
 
 pub struct XenForeignMemory {
     xfh: *mut xenforeignmemory_handle,
-    res: Option<*mut xenforeignmemory_resource_handle>,
+    res: Option<XenForeignMemoryResourceHandle>,
     ioreq: *mut ioreq,
     addr: Vec<(*mut c_void, u64)>,
 }
@@ -35,42 +38,37 @@ impl XenForeignMemory {
     }
 
     pub fn map_resource(&mut self, domid: domid_t, id: ioservid_t) -> Result<()> {
-        let mut paddr = ptr::null_mut::<c_void>();
-        let res = unsafe {
-            xenforeignmemory_map_resource(
-                self.xfh,
-                domid,
-                XENMEM_resource_ioreq_server,
-                id as u32,
-                1,
-                1,
-                ptr::addr_of_mut!(paddr),
-                libc::PROT_READ | libc::PROT_WRITE,
-                0,
-            )
-        };
-
-        if res.is_null() {
-            Err(Error::XenForeignMemoryFailure)
-        } else {
-            let offset = offset_of!(shared_iopage => vcpu_ioreq).get_byte_offset();
-            self.ioreq = unsafe { paddr.add(offset) } as *mut ioreq;
-            self.res = Some(res);
-            Ok(())
-        }
+        let paddr = ptr::null_mut::<c_void>();
+        xenforeignmemory_map_resource_ng(
+            domid,
+            XENMEM_resource_ioreq_server,
+            id as u32,
+            1,
+            1,
+            paddr,
+            libc::PROT_READ | libc::PROT_WRITE,
+            0,
+            ).map_or(
+                Err(Error::XenForeignMemoryFailure),
+                |resource_handle| {
+                    let offset = offset_of!(shared_iopage => vcpu_ioreq).get_byte_offset();
+                    self.ioreq = unsafe { resource_handle.addr.add(offset) } as *mut ioreq;
+                    self.res = Some(resource_handle);
+                    Ok(())
+            })
     }
 
     fn unmap_resource(&mut self) -> Result<()> {
-        if self.res.is_none() {
-            return Ok(());
-        }
-
-        let ret = unsafe { xenforeignmemory_unmap_resource(self.xfh, self.res.unwrap()) };
-        if ret < 0 {
-            Err(Error::XenForeignMemoryFailure)
-        } else {
-            self.res = None;
-            Ok(())
+        match &self.res {
+            Some(res) => {
+                xenforeignmemory_unmap_resource_ng(&res).map_or(
+                    Err(Error::XenForeignMemoryFailure),
+                    |_| {
+                        self.res = None;
+                        Ok(())
+                    })
+            }
+            None => Ok(())
         }
     }
 
-- 
2.25.1

