From vireshk  Fri Apr  8 10:30:33 2022
Delivered-To: viresh.kumar@linaro.org
Received: from pop.gmail.com [142.251.10.109] 	by vireshk-i7 with POP3 (fetchmail-6.4.2) 	for <vireshk@localhost> (single-drop); Fri, 08 Apr 2022 10:30:33 +0530 (IST)
Received: by 2002:a5e:d709:0:0:0:0:0 with SMTP id v9csp116021iom;         Thu, 7 Apr 2022 21:59:21 -0700 (PDT)
X-Google-Smtp-Source: ABdhPJwU4Y3noAjxuofUIM3LMp/NqoPDD0FfumDFg1fD8DRjj8eYMw4X4Mu4VaOEU0DXP+pgYDWZ
X-Received: by 2002:a17:902:a406:b0:158:260d:1ed2 with SMTP id p6-20020a170902a40600b00158260d1ed2mr272991plq.49.1649393961482;         Thu, 07 Apr 2022 21:59:21 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; t=1649393961; cv=none;         d=google.com; s=arc-20160816;         b=rKKAmxD1B4qqL0vXMtCy3FJEWWHHe2oKog9Sl31tkZfjwEXhfILX0Dlqd4bL1m5YVr          Db7VktelKnQTPu5BKWY5ePNzfm1EUmyjJHiu+Cuz0m8g72AoJ7axlk6sdajBKWCIcFul          ADellsjmj9GqbKTwnOvY5//q9vaDWLJ/i6eR//JjfVlMb5Y8BbAraLRAQ4xXWR9JQbAq          3dPrf7dQzu2a+F3U3it35Fg3yb/OpV3tyzpwjouOq4NsjtkTURXi3WnUl6LXPMBVFYp/          C0OiG9g7i8D6RUOe0fdb11Np7ljBu/lOoKvhBAszcedVDRzDTtC6TdEfA35wQnh5W0P9          iRsQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;         h=mime-version:references:in-reply-to:message-id:date:subject:cc:to          :from;         bh=kJjNPecjrs309BeW3XwagmLxok8SkdiK21RRyAL3wEY=;         b=bAA2B790ZUKDQNpAJu30BFojO11AOo5EDfb900H2Yc1yBRkCEfQRwJRLMbkW5kudck          S3+JaBwOH8NplWtzVd5YXKz+C1zZAIj92bncO/32wl8N2wXUHz3N9f7tkCf6Kz3S8vpi          u7YpW084ULlNk02LIuc9hDwNLPDDlBD6pUMX7zsdl/cSW4kaJu9aVKUK/O2vcoshIZ+w          GHFnTp08kRai7uYiJMTt/8n/sUVTK5LeX9WFW/URbacP6p1Zi/HmInqBThOpmJM4OPeU          ZgeoObRSf/CDIsaNbU6ulm5DE5W3CwSKsqhk0iFxFbl7a82CvRhGEbxFy53dA0jsRVGD          tX0w==
ARC-Authentication-Results: i=1; mx.google.com;        spf=pass (google.com: domain of rex-bc.chen@mediatek.com designates 60.244.123.138 as permitted sender) smtp.mailfrom=rex-bc.chen@mediatek.com;        dmarc=pass (p=QUARANTINE sp=QUARANTINE dis=NONE) header.from=mediatek.com
Return-Path: <rex-bc.chen@mediatek.com>
Received: from mailgw01.mediatek.com ([60.244.123.138])         by mx.google.com with ESMTPS id w8-20020a170902d70800b00153b2d1652csi1692094ply.308.2022.04.07.21.59.21         for <viresh.kumar@linaro.org>         (version=TLS1_2 cipher=ECDHE-ECDSA-AES128-GCM-SHA256 bits=128/128);         Thu, 07 Apr 2022 21:59:21 -0700 (PDT)
Received-SPF: pass (google.com: domain of rex-bc.chen@mediatek.com designates 60.244.123.138 as permitted sender) client-ip=60.244.123.138;
Authentication-Results: mx.google.com;        spf=pass (google.com: domain of rex-bc.chen@mediatek.com designates 60.244.123.138 as permitted sender) smtp.mailfrom=rex-bc.chen@mediatek.com;        dmarc=pass (p=QUARANTINE sp=QUARANTINE dis=NONE) header.from=mediatek.com
X-UUID: 2928e39fb82346af80e8f7d98106a2d0-20220408
X-UUID: 2928e39fb82346af80e8f7d98106a2d0-20220408
Received: from mtkexhb01.mediatek.inc [(172.21.101.102)] by mailgw01.mediatek.com 	(envelope-from <rex-bc.chen@mediatek.com>) 	(Generic MTA with TLSv1.2 ECDHE-RSA-AES256-SHA384 256/256) 	with ESMTP id 660165636; Fri, 08 Apr 2022 12:59:13 +0800
Received: from mtkcas11.mediatek.inc (172.21.101.40) by  mtkmbs07n1.mediatek.inc (172.21.101.16) with Microsoft SMTP Server (TLS) id  15.0.1497.2; Fri, 8 Apr 2022 12:59:13 +0800
Received: from mtksdccf07.mediatek.inc (172.21.84.99) by mtkcas11.mediatek.inc  (172.21.101.73) with Microsoft SMTP Server id 15.0.1497.2 via Frontend  Transport; Fri, 8 Apr 2022 12:59:13 +0800
From: Rex-BC Chen <rex-bc.chen@mediatek.com>
To: <rafael@kernel.org>, <viresh.kumar@linaro.org>, <robh+dt@kernel.org>, 	<krzk+dt@kernel.org>
CC: <matthias.bgg@gmail.com>, <jia-wei.chang@mediatek.com>, 	<roger.lu@mediatek.com>, <hsinyi@google.com>, <linux-pm@vger.kernel.org>, 	<devicetree@vger.kernel.org>, <linux-kernel@vger.kernel.org>, 	<linux-arm-kernel@lists.infradead.org>, <linux-mediatek@lists.infradead.org>, 	<Project_Global_Chrome_Upstream_Group@mediatek.com>, Rex-BC Chen 	<rex-bc.chen@mediatek.com>
Subject: [PATCH V2 15/15] cpufreq: mediatek: Use device print to show logs
Date: Fri, 8 Apr 2022 12:59:08 +0800
Message-ID: <20220408045908.21671-16-rex-bc.chen@mediatek.com>
X-Mailer: git-send-email 2.18.0
In-Reply-To: <20220408045908.21671-1-rex-bc.chen@mediatek.com>
References: <20220408045908.21671-1-rex-bc.chen@mediatek.com>
Return-Path: rex-bc.chen@mediatek.com
MIME-Version: 1.0
Content-Type: text/plain
X-MTK: N
Content-Length: 4271
Lines: 120

Replace pr_* with dev_* to show logs.

Signed-off-by: Rex-BC Chen <rex-bc.chen@mediatek.com>
---
 drivers/cpufreq/mediatek-cpufreq.c | 41 +++++++++++++++++-------------
 1 file changed, 23 insertions(+), 18 deletions(-)

diff --git a/drivers/cpufreq/mediatek-cpufreq.c b/drivers/cpufreq/mediatek-cpufreq.c
index 07d3b31e3ee0..34e3baa4927f 100644
--- a/drivers/cpufreq/mediatek-cpufreq.c
+++ b/drivers/cpufreq/mediatek-cpufreq.c
@@ -92,13 +92,15 @@ static int mtk_cpufreq_voltage_tracking(struct mtk_cpu_dvfs_info *info,
 
 	old_vproc = regulator_get_voltage(proc_reg);
 	if (old_vproc < 0) {
-		pr_err("%s: invalid Vproc value: %d\n", __func__, old_vproc);
+		dev_err(info->cpu_dev,
+			"%s: invalid Vproc value: %d\n", __func__, old_vproc);
 		return old_vproc;
 	}
 
 	old_vsram = regulator_get_voltage(sram_reg);
 	if (old_vsram < 0) {
-		pr_err("%s: invalid Vsram value: %d\n", __func__, old_vsram);
+		dev_err(info->cpu_dev,
+			"%s: invalid Vsram value: %d\n", __func__, old_vsram);
 		return old_vsram;
 	}
 
@@ -217,8 +219,8 @@ static int mtk_cpufreq_set_target(struct cpufreq_policy *policy,
 	freq_hz = freq_table[index].frequency * 1000;
 	opp = dev_pm_opp_find_freq_ceil(cpu_dev, &freq_hz);
 	if (IS_ERR(opp)) {
-		pr_err("cpu%d: failed to find OPP for %ld\n",
-		       policy->cpu, freq_hz);
+		dev_err(cpu_dev, "cpu%d: failed to find OPP for %ld\n",
+			policy->cpu, freq_hz);
 		return PTR_ERR(opp);
 	}
 	vproc = dev_pm_opp_get_voltage(opp);
@@ -243,8 +245,8 @@ static int mtk_cpufreq_set_target(struct cpufreq_policy *policy,
 	if (old_vproc <= target_vproc) {
 		ret = mtk_cpufreq_set_voltage(info, target_vproc);
 		if (ret) {
-			pr_err("cpu%d: failed to scale up voltage!\n",
-			       policy->cpu);
+			dev_err(cpu_dev, "cpu%d: failed to scale up voltage!\n",
+				policy->cpu);
 			mtk_cpufreq_set_voltage(info, old_vproc);
 			goto out;
 		}
@@ -253,8 +255,8 @@ static int mtk_cpufreq_set_target(struct cpufreq_policy *policy,
 	/* Reparent the CPU clock to intermediate clock. */
 	ret = clk_set_parent(cpu_clk, info->inter_clk);
 	if (ret) {
-		pr_err("cpu%d: failed to re-parent cpu clock!\n",
-		       policy->cpu);
+		dev_err(cpu_dev, "cpu%d: failed to re-parent cpu clock!\n",
+			policy->cpu);
 		mtk_cpufreq_set_voltage(info, old_vproc);
 		goto out;
 	}
@@ -262,8 +264,8 @@ static int mtk_cpufreq_set_target(struct cpufreq_policy *policy,
 	/* Set the original PLL to target rate. */
 	ret = clk_set_rate(armpll, freq_hz);
 	if (ret) {
-		pr_err("cpu%d: failed to scale cpu clock rate!\n",
-		       policy->cpu);
+		dev_err(cpu_dev, "cpu%d: failed to scale cpu clock rate!\n",
+			policy->cpu);
 		clk_set_parent(cpu_clk, armpll);
 		mtk_cpufreq_set_voltage(info, old_vproc);
 		goto out;
@@ -272,8 +274,8 @@ static int mtk_cpufreq_set_target(struct cpufreq_policy *policy,
 	/* Set parent of CPU clock back to the original PLL. */
 	ret = clk_set_parent(cpu_clk, armpll);
 	if (ret) {
-		pr_err("cpu%d: failed to re-parent cpu clock!\n",
-		       policy->cpu);
+		dev_err(cpu_dev, "cpu%d: failed to re-parent cpu clock!\n",
+			policy->cpu);
 		mtk_cpufreq_set_voltage(info, inter_vproc);
 		goto out;
 	}
@@ -285,8 +287,9 @@ static int mtk_cpufreq_set_target(struct cpufreq_policy *policy,
 	if (vproc < inter_vproc || vproc < old_vproc) {
 		ret = mtk_cpufreq_set_voltage(info, vproc);
 		if (ret) {
-			pr_err("cpu%d: failed to scale down voltage!\n",
-			       policy->cpu);
+			dev_err(cpu_dev,
+				"cpu%d: failed to scale down voltage!\n",
+				policy->cpu);
 			clk_set_parent(cpu_clk, info->inter_clk);
 			clk_set_rate(armpll, old_freq_hz);
 			clk_set_parent(cpu_clk, armpll);
@@ -568,15 +571,17 @@ static int mtk_cpufreq_init(struct cpufreq_policy *policy)
 
 	info = mtk_cpu_dvfs_info_lookup(policy->cpu);
 	if (!info) {
-		pr_err("dvfs info for cpu%d is not initialized.\n",
-		       policy->cpu);
+		dev_err(info->cpu_dev,
+			"dvfs info for cpu%d is not initialized.\n",
+			policy->cpu);
 		return -EINVAL;
 	}
 
 	ret = dev_pm_opp_init_cpufreq_table(info->cpu_dev, &freq_table);
 	if (ret) {
-		pr_err("failed to init cpufreq table for cpu%d: %d\n",
-		       policy->cpu, ret);
+		dev_err(info->cpu_dev,
+			"failed to init cpufreq table for cpu%d: %d\n",
+			policy->cpu, ret);
 		return ret;
 	}
 
-- 
2.18.0

