From vireshk  Mon Apr 23 09:46:43 2018
Delivered-To: viresh.kumar@linaro.org
Received: from gmail-pop.l.google.com [74.125.68.109] 	by vireshk-i7 with POP3 (fetchmail-6.3.26) 	for <vireshk@localhost> (single-drop); Mon, 23 Apr 2018 09:46:43 +0530 (IST)
Received: by 2002:a02:b1d8:0:0:0:0:0 with SMTP id u24-v6csp1767100jah;         Sat, 21 Apr 2018 07:19:56 -0700 (PDT)
X-Google-Smtp-Source: AB8JxZp/PJLjdHl8umoaZLcb9s2SVlQqAw3SaTpRDKFCk4BzAk3tbapjeO/cU7zw6mxlQO2pe/io
X-Received: by 10.28.170.84 with SMTP id t81mr1166475wme.130.1524320396220;         Sat, 21 Apr 2018 07:19:56 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; t=1524320396; cv=none;         d=google.com; s=arc-20160816;         b=S2GQ2hDwHy2rXjv6RdZ/Yytz1INd67GubmmFautcDdE5jz3mQmiVrZa+EmdGaW0eB/          yaRM0dZCcHIMectq97rhm6SSqhOODi2LUgA35KH2P+q89qcV6HVmjCEwK2eLoHoaFiKO          1sk+zGlWQIAcicwuPHooobgNoty38fiwWP5rIYsCN9CsHAhJu93hENzVTT2irpFh2v9d          oV3teSMZA5MMEYxrPGQ3Xt57yQI9ViCSikM71nKA45FMcrEK2dWMMEEJn+cS/blUeQ6G          ZlAYvMDuKel60qva4SqOWtuJ4wTcMBDzTpHVG3lenbDtjQexRL3oULkMUU+GnxhG2HHM          Jk+Q==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;         h=message-id:date:subject:cc:to:from:arc-authentication-results;         bh=psT3en0cRkJdshz9/tYJm4Gg/7xc4jPACq1sWvO/nmk=;         b=0MpSt1P4MtJN2kYKu6P3zImyCgbrGd3/K8sgYTGtE45v1szGMAjpnFkrVXvLpCRO12          ySXpXtQNm4YSupkXEExzMiB7NkuhVt+lvab9v6CXv5/9noajpeMEj1aGrOkbtKwLOI2I          9xL6aGBP1FMMrbpNgmC0ANcAOJQ2bMTr8ki2dAUpaDkdW08trJEQT4pw9sp+9iNcNrC6          kgD2Hha4XRbnFZX4TAmjIEOOKxUsyX6FLop3BqcCBFo+Zmj48U/d3yWo5vCxmXhWmw8g          Lz6bHtMIOeMlkwSnQt/i5QNYAnM9eLNvve/zCiJ9gNJjkaUbRnPKkKLomlGafrkR3p79          jOxg==
ARC-Authentication-Results: i=1; mx.google.com;        spf=pass (google.com: domain of miquel.raynal@bootlin.com designates 62.4.15.54 as permitted sender) smtp.mailfrom=miquel.raynal@bootlin.com
Return-Path: <miquel.raynal@bootlin.com>
Received: from mail.bootlin.com (mail.bootlin.com. [62.4.15.54])         by mx.google.com with ESMTP id n63si2608540wmn.99.2018.04.21.07.19.56         for <viresh.kumar@linaro.org>;         Sat, 21 Apr 2018 07:19:56 -0700 (PDT)
Received-SPF: pass (google.com: domain of miquel.raynal@bootlin.com designates 62.4.15.54 as permitted sender) client-ip=62.4.15.54;
Authentication-Results: mx.google.com;        spf=pass (google.com: domain of miquel.raynal@bootlin.com designates 62.4.15.54 as permitted sender) smtp.mailfrom=miquel.raynal@bootlin.com
Received: by mail.bootlin.com (Postfix, from userid 110) 	id 3B06E207E1; Sat, 21 Apr 2018 16:19:55 +0200 (CEST)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on mail.bootlin.com
X-Spam-Level: 
X-Spam-Status: No, score=-1.0 required=5.0 tests=ALL_TRUSTED,SHORTCIRCUIT, 	URIBL_BLOCKED shortcircuit=ham autolearn=disabled version=3.4.0
Received: from localhost.localdomain (unknown [91.224.148.103]) 	by mail.bootlin.com (Postfix) with ESMTPSA id 785EF2073D; 	Sat, 21 Apr 2018 16:19:44 +0200 (CEST)
From: Miquel Raynal <miquel.raynal@bootlin.com>
To: Gregory Clement <gregory.clement@bootlin.com>, 	Jason Cooper <jason@lakedaemon.net>, 	Andrew Lunn <andrew@lunn.ch>, 	Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>, 	"Rafael J . Wysocki" <rjw@rjwysocki.net>, 	Viresh Kumar <viresh.kumar@linaro.org>
Cc: Thomas Petazzoni <thomas.petazzoni@bootlin.com>, 	Antoine Tenart <antoine.tenart@bootlin.com>, 	Maxime Chevallier <maxime.chevallier@bootlin.com>, 	Nadav Haklai <nadavh@marvell.com>, 	<linux-arm-kernel@lists.infradead.org>, 	linux-pm@vger.kernel.org, 	Miquel Raynal <miquel.raynal@bootlin.com>
Subject: [PATCH] cpufreq: add suspend/resume support in Armada 37xx DVFS driver
Date: Sat, 21 Apr 2018 16:19:43 +0200
Message-Id: <20180421141943.25705-1-miquel.raynal@bootlin.com>
X-Mailer: git-send-email 2.14.1
Status: RO
X-Status: A
Content-Length: 4118
Lines: 128

Add suspend/resume hooks in Armada 37xx DVFS driver to handle S2RAM
operations. As there is currently no 'driver' structure, create one
to store both the regmap and the register values during suspend
operation.

A syscore_ops is used to export the suspend/resume hooks.

Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
---
 drivers/cpufreq/armada-37xx-cpufreq.c | 73 ++++++++++++++++++++++++++++++++++-
 1 file changed, 71 insertions(+), 2 deletions(-)

diff --git a/drivers/cpufreq/armada-37xx-cpufreq.c b/drivers/cpufreq/armada-37xx-cpufreq.c
index 72a2975499db..9c9c3673cbbe 100644
--- a/drivers/cpufreq/armada-37xx-cpufreq.c
+++ b/drivers/cpufreq/armada-37xx-cpufreq.c
@@ -22,6 +22,7 @@
 #include <linux/pm_opp.h>
 #include <linux/regmap.h>
 #include <linux/slab.h>
+#include <linux/syscore_ops.h>
 
 /* Power management in North Bridge register set */
 #define ARMADA_37XX_NB_L0L1	0x18
@@ -56,6 +57,18 @@
  */
 #define LOAD_LEVEL_NR	4
 
+#if defined(CONFIG_PM)
+struct armada37xx_cpufreq_state {
+	struct regmap *regmap;
+	u32 nb_l0l1;
+	u32 nb_l2l3;
+	u32 nb_dyn_mod;
+	u32 nb_cpu_load;
+};
+
+static struct armada37xx_cpufreq_state *armada37xx_cpufreq_state;
+#endif /* CONFIG_PM */
+
 struct armada_37xx_dvfs {
 	u32 cpu_freq_max;
 	u8 divider[LOAD_LEVEL_NR];
@@ -136,7 +149,7 @@ static void __init armada37xx_cpufreq_dvfs_setup(struct regmap *base,
 	clk_set_parent(clk, parent);
 }
 
-static void __init armada37xx_cpufreq_disable_dvfs(struct regmap *base)
+static void armada37xx_cpufreq_disable_dvfs(struct regmap *base)
 {
 	unsigned int reg = ARMADA_37XX_NB_DYN_MOD,
 		mask = ARMADA_37XX_NB_DFS_EN;
@@ -162,6 +175,46 @@ static void __init armada37xx_cpufreq_enable_dvfs(struct regmap *base)
 	regmap_update_bits(base, reg, mask, mask);
 }
 
+#if defined(CONFIG_PM)
+static int armada37xx_cpufreq_suspend(void)
+{
+	struct armada37xx_cpufreq_state *state = armada37xx_cpufreq_state;
+
+	regmap_read(state->regmap, ARMADA_37XX_NB_L0L1, &state->nb_l0l1);
+	regmap_read(state->regmap, ARMADA_37XX_NB_L2L3, &state->nb_l2l3);
+	regmap_read(state->regmap, ARMADA_37XX_NB_CPU_LOAD,
+		    &state->nb_cpu_load);
+	regmap_read(state->regmap, ARMADA_37XX_NB_DYN_MOD, &state->nb_dyn_mod);
+
+	return 0;
+}
+
+static void armada37xx_cpufreq_resume(void)
+{
+	struct armada37xx_cpufreq_state *state = armada37xx_cpufreq_state;
+
+	/* Ensure DVFS is disabled otherwise the following registers are RO */
+	armada37xx_cpufreq_disable_dvfs(state->regmap);
+
+	regmap_write(state->regmap, ARMADA_37XX_NB_L0L1, state->nb_l0l1);
+	regmap_write(state->regmap, ARMADA_37XX_NB_L2L3, state->nb_l2l3);
+	regmap_write(state->regmap, ARMADA_37XX_NB_CPU_LOAD,
+		     state->nb_cpu_load);
+
+	/*
+	 * NB_DYN_MOD register is the one that actually enable back DVFS if it
+	 * was enabled before the suspend operation. This must be done last
+	 * otherwise other registers are not writable.
+	 */
+	regmap_write(state->regmap, ARMADA_37XX_NB_DYN_MOD, state->nb_dyn_mod);
+}
+
+static struct syscore_ops armada37xx_cpufreq_syscore_pm_ops = {
+	.suspend = armada37xx_cpufreq_suspend,
+	.resume = armada37xx_cpufreq_resume,
+};
+#endif /* CONFIG_PM */
+
 static int __init armada37xx_cpufreq_driver_init(void)
 {
 	struct armada_37xx_dvfs *dvfs;
@@ -231,9 +284,25 @@ static int __init armada37xx_cpufreq_driver_init(void)
 	/* Now that everything is setup, enable the DVFS at hardware level */
 	armada37xx_cpufreq_enable_dvfs(nb_pm_base);
 
+	armada37xx_cpufreq_state = kmalloc(sizeof(*armada37xx_cpufreq_state),
+					   GFP_KERNEL);
+	if (!armada37xx_cpufreq_state)
+		return -ENOMEM;
+
+	armada37xx_cpufreq_state->regmap = nb_pm_base;
+
+#if defined(CONFIG_PM)
+	/* Register suspend/resume hooks */
+	register_syscore_ops(&armada37xx_cpufreq_syscore_pm_ops);
+#endif /* CONFIG_PM */
+
 	pdev = platform_device_register_simple("cpufreq-dt", -1, NULL, 0);
 
-	return PTR_ERR_OR_ZERO(pdev);
+	ret = PTR_ERR_OR_ZERO(pdev);
+	if (ret)
+		kfree(armada37xx_cpufreq_state);
+
+	return ret;
 }
 /* late_initcall, to guarantee the driver is loaded after A37xx clock driver */
 late_initcall(armada37xx_cpufreq_driver_init);
-- 
2.14.1

