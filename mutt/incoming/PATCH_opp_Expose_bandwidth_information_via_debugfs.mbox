From vireshk  Mon May 18 16:56:35 2020
Delivered-To: viresh.kumar@linaro.org
Received: from pop.gmail.com [172.217.194.108] 	by vireshk-i7 with POP3 (fetchmail-6.3.26) 	for <vireshk@localhost> (single-drop); Mon, 18 May 2020 16:56:35 +0530 (IST)
Received: by 2002:a05:6602:146:0:0:0:0 with SMTP id v6csp2826133iot;         Mon, 18 May 2020 04:25:56 -0700 (PDT)
X-Received: by 2002:a05:600c:231a:: with SMTP id 26mr20047467wmo.59.1589801155999;         Mon, 18 May 2020 04:25:55 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; t=1589801155; cv=none;         d=google.com; s=arc-20160816;         b=fO30HK3hD0CrCUi0UyIPW7EEI9ngt02u/4fSiPQnsGOxk2sfohfAFeeHjUTfOWIQni          wPJrImi7rGFO8K0SZ26YdCwX/5NPNegyYqGjq8dwQov22e4zlZJhHQTrWzwV6mb4sJMH          cCR4ZPHZ8+9M97kDdbl8g59LRX1PHx9HX0Yvo77/VdDNhg7fXBK0wrRk0AJlt43NtFJe          kXFdm2ad/fYqgd2Qj4FviOvQywv28YOVNJOIQ4A+JLjjdlTmBiyaiAim+Fs/Kr186mmy          LSJHG865YOwNd3HhS1OAy2YzMdrNDS8Xali4bmr5csSt70Lcj2s1yNsmOeGqSxuO0tzi          ZV5w==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;         h=content-transfer-encoding:mime-version:message-id:date:subject:cc          :to:from:dkim-signature;         bh=Cp5t64DP8cuU6QLKJHITBu2Jrqg1T86Oyn1I0EqRkbY=;         b=yiPVBtJcC3+a+BbpPAux+i3ASZzBuF429F+XEy1wQfl950k+ag++ncxUlyZQnAu4Bs          U4w1d5rEmhtE16R85sjwp816f9tWVtncE2+3P5mbUVheWyQtfBOvTzTxhJE+R+fCbYsR          kYJ/Rvdw/BDb3hUhCE9adcjmc87xLxQsGEgIOQLiXRtu6nV4OtlInIYeumxJCaQGo7X9          E5W7r38qGg41pnzse9f2eacOju+IgLVaBwBjnxq9Nsp8IjizdyiQ3tLcHPDbAYAwIaMn          FikL0RO/Mj5aG17uyeUaBpWlfXQ6RHzcHo6fereOyPzJVqUow9vg9OJv4Zgyi5UhpVBE          xsKg==
ARC-Authentication-Results: i=1; mx.google.com;        dkim=pass header.i=@linaro.org header.s=google header.b=hjmSGneQ;        spf=pass (google.com: domain of georgi.djakov@linaro.org designates 209.85.220.65 as permitted sender) smtp.mailfrom=georgi.djakov@linaro.org;        dmarc=pass (p=NONE sp=NONE dis=NONE) header.from=linaro.org
Return-Path: <georgi.djakov@linaro.org>
Received: from mail-sor-f65.google.com (mail-sor-f65.google.com. [209.85.220.65])         by mx.google.com with SMTPS id g13sor5606181wrp.35.2020.05.18.04.25.55         for <viresh.kumar@linaro.org>         (Google Transport Security);         Mon, 18 May 2020 04:25:55 -0700 (PDT)
Received-SPF: pass (google.com: domain of georgi.djakov@linaro.org designates 209.85.220.65 as permitted sender) client-ip=209.85.220.65;
Authentication-Results: mx.google.com;        dkim=pass header.i=@linaro.org header.s=google header.b=hjmSGneQ;        spf=pass (google.com: domain of georgi.djakov@linaro.org designates 209.85.220.65 as permitted sender) smtp.mailfrom=georgi.djakov@linaro.org;        dmarc=pass (p=NONE sp=NONE dis=NONE) header.from=linaro.org
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;         d=linaro.org; s=google;         h=from:to:cc:subject:date:message-id:mime-version          :content-transfer-encoding;         bh=Cp5t64DP8cuU6QLKJHITBu2Jrqg1T86Oyn1I0EqRkbY=;         b=hjmSGneQTHYaRIARpUw2uF1zCGYfyROUKQSc9ktCaPP/Ar5MjTfh6dYMlrJ4TtvjyF          9aP7lazjRU/6HOdncC/Tpc+nD1ZddzAIG0PrwVEwbs8AEuCD3JnL4Qfvg9w8AAbRIP8o          u1oune0WmrK/OkH/MOB+cD9bQ7qY6yegSBaxO/cNu/eb7tr5lxFs4BTjc3FJ0PS1zrMq          fVfU51CjMXdQKQ5MUfO/8bMoIj8qzN7eTd1ocxDrNi87BVJN0gpCKEfMXjeA4KeD59gn          Uf1roCgghb0pdEC8w7jhlBn3O4ZVFEVwYyCZIpKdAzendqgcmdx9v3ugCiZ0Z/qdM4C0          F3rQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;         d=1e100.net; s=20161025;         h=x-gm-message-state:from:to:cc:subject:date:message-id:mime-version          :content-transfer-encoding;         bh=Cp5t64DP8cuU6QLKJHITBu2Jrqg1T86Oyn1I0EqRkbY=;         b=jYY1PjFR+p6iwJ+9MecddZ/y7rnf+PaQ3lEr9R+Cb/piKkOh0UcxYcsJDmLRQp0OTE          1L5wKcDUIKMklXfR84MsGMdZm3qbAcUl8hWoCRmk2iebZ3lw8tX0p+eyPS5WU+SUhvWo          XjOwGeIdLXfB8FPomlmE+TyH/yT4BnP5bE6QmYVf9olAuQj/vqA5AL+rWy7Xn6Rn3cdj          MtrLiFPG+4i6May/2z8OV2JzjE6FTYQqrwMQWtMstYZFgyKUe0hR8b7HibswyfdTEWcb          waHeCfVqzt0Of/bRZI27XU+TF5PpSDkzTJDznVShy6JW5XWAoGIGWOHe0YvSBqQBdies          +1nQ==
X-Gm-Message-State: AOAM5304QbDPJe8akcmW8tZd7G/yky5Tl+J6hPR2rXDbw2lfilurNvO8 	zQzU3tz5Zcu9skaMDlPxmN8XXKaFoaNXtQ==
X-Google-Smtp-Source: ABdhPJxaOFhg9/fTF94VNlME5rhvTwt28rL6EDkTHKYKeapkFZ9Rlp9cNMEcMVzXiInVQgPGljgCBg==
X-Received: by 2002:a5d:4745:: with SMTP id o5mr20481405wrs.128.1589801155255;         Mon, 18 May 2020 04:25:55 -0700 (PDT)
Return-Path: <georgi.djakov@linaro.org>
Received: from localhost.localdomain ([212.45.67.2])         by smtp.googlemail.com with ESMTPSA id l5sm16608552wrr.72.2020.05.18.04.25.53         (version=TLS1_2 cipher=ECDHE-ECDSA-AES128-GCM-SHA256 bits=128/128);         Mon, 18 May 2020 04:25:54 -0700 (PDT)
From: Georgi Djakov <georgi.djakov@linaro.org>
To: viresh.kumar@linaro.org
Cc: Georgi Djakov <georgi.djakov@linaro.org>
Subject: [PATCH] opp: Expose bandwidth information via debugfs
Date: Mon, 18 May 2020 14:25:32 +0300
Message-Id: <20200518112532.11619-1-georgi.djakov@linaro.org>
X-Mailer: git-send-email 2.26.2
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit

From: Viresh Kumar <viresh.kumar@linaro.org>

Expose the bandwidth information as well via debugfs.

Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
Signed-off-by: Georgi Djakov <georgi.djakov@linaro.org>
---
 drivers/interconnect/core.c  | 18 ++++++++++++++++
 drivers/opp/debugfs.c        | 42 ++++++++++++++++++++++++++++++++++++
 include/linux/interconnect.h |  6 ++++++
 3 files changed, 66 insertions(+)

diff --git a/drivers/interconnect/core.c b/drivers/interconnect/core.c
index 2d2e49780511..a56349c14985 100644
--- a/drivers/interconnect/core.c
+++ b/drivers/interconnect/core.c
@@ -514,6 +514,24 @@ void icc_set_tag(struct icc_path *path, u32 tag)
 }
 EXPORT_SYMBOL_GPL(icc_set_tag);
 
+/**
+ * icc_get_name() - Get name of the icc path
+ * @path: reference to the path returned by icc_get()
+ *
+ * This function is used by an interconnect consumer to get the name of the icc
+ * path.
+ *
+ * Returns a valid pointer on success, or NULL otherwise.
+ */
+const char *icc_get_name(struct icc_path *path)
+{
+	if (!path)
+		return NULL;
+
+	return path->name;
+}
+EXPORT_SYMBOL_GPL(icc_get_name);
+
 /**
  * icc_set_bw() - set bandwidth constraints on an interconnect path
  * @path: reference to the path returned by icc_get()
diff --git a/drivers/opp/debugfs.c b/drivers/opp/debugfs.c
index 609665e339b6..ca8bdef53385 100644
--- a/drivers/opp/debugfs.c
+++ b/drivers/opp/debugfs.c
@@ -32,6 +32,47 @@ void opp_debug_remove_one(struct dev_pm_opp *opp)
 	debugfs_remove_recursive(opp->dentry);
 }
 
+static ssize_t bw_name_read(struct file *fp, char __user *userbuf,
+			    size_t count, loff_t *ppos)
+{
+	struct icc_path *path = fp->private_data;
+	char buf[64];
+	int i;
+
+	i = scnprintf(buf, sizeof(buf), "%.62s\n", icc_get_name(path));
+
+	return simple_read_from_buffer(userbuf, count, ppos, buf, i);
+}
+
+static const struct file_operations bw_name_fops = {
+	.open = simple_open,
+	.read = bw_name_read,
+	.llseek = default_llseek,
+};
+
+static void opp_debug_create_bw(struct dev_pm_opp *opp,
+				struct opp_table *opp_table,
+				struct dentry *pdentry)
+{
+	struct dentry *d;
+	char name[11];
+	int i;
+
+	for (i = 0; i < opp_table->path_count; i++) {
+		snprintf(name, sizeof(name), "icc-path-%.1d", i);
+
+		/* Create per-opp directory */
+		d = debugfs_create_dir(name, pdentry);
+
+		debugfs_create_file("name", S_IRUGO, d, opp_table->paths[i],
+				    &bw_name_fops);
+		debugfs_create_u32("peak_bw", S_IRUGO, d,
+				   &opp->bandwidth[i].peak);
+		debugfs_create_u32("avg_bw", S_IRUGO, d,
+				   &opp->bandwidth[i].avg);
+	}
+}
+
 static void opp_debug_create_supplies(struct dev_pm_opp *opp,
 				      struct opp_table *opp_table,
 				      struct dentry *pdentry)
@@ -94,6 +135,7 @@ void opp_debug_create_one(struct dev_pm_opp *opp, struct opp_table *opp_table)
 			     &opp->clock_latency_ns);
 
 	opp_debug_create_supplies(opp, opp_table, d);
+	opp_debug_create_bw(opp, opp_table, d);
 
 	opp->dentry = d;
 }
diff --git a/include/linux/interconnect.h b/include/linux/interconnect.h
index 34e97231a6ab..1ad09efd296e 100644
--- a/include/linux/interconnect.h
+++ b/include/linux/interconnect.h
@@ -32,6 +32,7 @@ struct icc_path *of_icc_get_by_index(struct device *dev, int idx);
 void icc_put(struct icc_path *path);
 int icc_set_bw(struct icc_path *path, u32 avg_bw, u32 peak_bw);
 void icc_set_tag(struct icc_path *path, u32 tag);
+const char *icc_get_name(struct icc_path *path);
 
 #else
 
@@ -65,6 +66,11 @@ static inline void icc_set_tag(struct icc_path *path, u32 tag)
 {
 }
 
+static inline const char *icc_get_name(struct icc_path *path)
+{
+	return NULL;
+}
+
 #endif /* CONFIG_INTERCONNECT */
 
 #endif /* __LINUX_INTERCONNECT_H */

