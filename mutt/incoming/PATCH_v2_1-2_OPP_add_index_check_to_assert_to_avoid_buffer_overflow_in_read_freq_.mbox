From vireshk  Mon Dec  2 08:30:41 2024
Delivered-To: viresh.kumar@linaro.org
Received: from pop.gmail.com [74.125.200.109] 	by vireshk-i7 with POP3 (fetchmail-6.4.2) 	for <vireshk@localhost> (single-drop); Mon, 02 Dec 2024 08:30:41 +0530 (IST)
Received: by 2002:a05:7208:c0e:b0:92:10b5:baa3 with SMTP id ix14csp600963rbb;         Fri, 29 Nov 2024 07:06:35 -0800 (PST)
X-Received: by 2002:a05:600c:1d18:b0:426:8884:2c58 with SMTP id 5b1f17b1804b1-434a9dbbcc7mr117700605e9.4.1732892795155;         Fri, 29 Nov 2024 07:06:35 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1732892795; cv=none;         d=google.com; s=arc-20240605;         b=O1EYZz38uiVbTZtBAcHu03T1wcsiEStwnbptRpQ2OWKNd7wk64P6J7DokHm2pZ0eTm          gwV64q/6zctX1vT4L1xaKEVm4JwoSTu97URqMCpyGTkmWZtaLusU/kFv3EsIU893gv+P          mZ04/zABpjCO0UM49FeBxnTWNNwrr4096W0l3qFBaA7i5sxgaonFJmefugTF41sn4w6y          bLLvJZxmeALCRrqzkcUllRQcXhSVCrdFtmhCAIlAVxxx4oiyKf4KhTUW9XomiEacfgow          UEwxcjClNzPaHAsq2EnYTdXHP/HlB7nLKht/FEC3Ah9h61lHqVaOvn5RPxq6bjYN6Lzx          Z01Q==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20240605;         h=cc:to:in-reply-to:references:message-id:content-transfer-encoding          :mime-version:subject:date:from:dkim-signature;         bh=O1RxO6Y2JI3TfYtTzU3PRytsUBUMUtMEWiVHbRJqhOM=;         fh=/k6wi4CqSzzU4H2vrBE/Jgfp0kCFSfkdgL3qlFlxJOk=;         b=SkKxUcwSSWijnmppXFkmOJtURten8CYkGDKjmi2dLaLt/bxnlSLwlR4RP48u+r9Hg/          +CFIodW3ED/lUSj/2mCWI9qepRZDRuUQArXenIWIylypQ/TEP79MomBc6As7phuX/kli          TrxhPlwkN20znSLv6PSa2ljovrP5A5ZSjfDVZ6skLKVuH7jm9dmMU40philDDjrlFMlS          oNhwBT156GXzRtvDhrRAny2459I8zu7Lp5/3sOQkLpYqZeHi9cbfu6uIyYQZoK4xxJvH          dcw0MMIH+fh4azn2cUlQ7LMv++OVuvD3WqPm793bKTWA4x7pG9lLey+A5EJd8WsYzSEW          Xxlg==;         dara=google.com
ARC-Authentication-Results: i=1; mx.google.com;        dkim=pass header.i=@linaro.org header.s=google header.b=wJ4q+bec;        spf=pass (google.com: domain of neil.armstrong@linaro.org designates 209.85.220.41 as permitted sender) smtp.mailfrom=neil.armstrong@linaro.org;        dmarc=pass (p=NONE sp=NONE dis=NONE) header.from=linaro.org;        dara=neutral header.i=@linaro.org
Return-Path: <neil.armstrong@linaro.org>
Received: from mail-sor-f41.google.com (mail-sor-f41.google.com. [209.85.220.41])         by mx.google.com with SMTPS id 5b1f17b1804b1-434b10a4cb3sor15117525e9.12.2024.11.29.07.06.35         for <viresh.kumar@linaro.org>         (Google Transport Security);         Fri, 29 Nov 2024 07:06:35 -0800 (PST)
Received-SPF: pass (google.com: domain of neil.armstrong@linaro.org designates 209.85.220.41 as permitted sender) client-ip=209.85.220.41;
Authentication-Results: mx.google.com;        dkim=pass header.i=@linaro.org header.s=google header.b=wJ4q+bec;        spf=pass (google.com: domain of neil.armstrong@linaro.org designates 209.85.220.41 as permitted sender) smtp.mailfrom=neil.armstrong@linaro.org;        dmarc=pass (p=NONE sp=NONE dis=NONE) header.from=linaro.org;        dara=neutral header.i=@linaro.org
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;         d=linaro.org; s=google; t=1732892795; x=1733497595; darn=linaro.org;         h=cc:to:in-reply-to:references:message-id:content-transfer-encoding          :mime-version:subject:date:from:from:to:cc:subject:date:message-id          :reply-to;         bh=O1RxO6Y2JI3TfYtTzU3PRytsUBUMUtMEWiVHbRJqhOM=;         b=wJ4q+becJlzNgK3QgFMEmKBL5971+22I0vcaykddBqwRtLihTA9EIDSz35F1gtWJmn          5dRgQi8VpNXN+C90WuFZz6+IIO8OHFyjxie7+LxJaPm5Kx/Bo9/irwrQ1VB+z8w8jNPw          lJfnCBh6aA/0R6L/rcLzBf0nNh9f785WgDbXdMaMVTrj9Odq5p4NSe712hMWwHh4EH4D          Ksl95ISYkbE5BJnqT7j2AXAM3MsYIKki5jrz1cSMyXQ9sLUBCx22hMunAx6cGyh0YtwX          OZGELXLgmHYgbV0DtK5pGPmFhvmammNDywjN/iPQFWt4ZHPKUNsKLUCstH9rhb9gJYLh          gYzw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;         d=1e100.net; s=20230601; t=1732892795; x=1733497595;         h=cc:to:in-reply-to:references:message-id:content-transfer-encoding          :mime-version:subject:date:from:x-gm-message-state:from:to:cc          :subject:date:message-id:reply-to;         bh=O1RxO6Y2JI3TfYtTzU3PRytsUBUMUtMEWiVHbRJqhOM=;         b=bm4IEISplasJnVZ6BpdEsyKW4l3ZuI+yOAeviX/tcN9KA8HKBOlb0AJRaUY+2xU275          qX1ps8xPKzNBc5r5dWckPKNJ4gyu0CKrSgIKNmwsWPYIL41x5Nee8AkuIUyx1xmuxr1m          C/o34V+o1zUGAnbrmFimq0SFV8kfIe909QNzZ4q5PgFG/IDC07tav+wpo8bnphM4RoQ3          /PKHqkvtFRC5ASOdfAP/YQZqGS4uZKAc5h2EduWSJXP47FyG6yj6GwPxNfTUuL/eGK3a          4pCN9XkkrWprwH2zlwhfSHDCoWakJdqBYVXsUhi2JK+ZbCTUyjbruC23eY0AvMpdaiSb          yAgg==
X-Gm-Message-State: AOJu0Yz+fpD8mDPugrFqafLIM/yynY8Vohr3HkoHAVxd2JIzm0Mw4vcy 	KJCVJIjhWTsZkniQojN+Y0XCT2GgOoZd73kfazdqErUc6dkz5rCk6gKMEYWRvM26/A==
X-Gm-Gg: ASbGncs3bL338R9wFo6xt0XVXGLtA9XicYc9aamEv96dFhDjM3DjycmUFfcP5fsMIXW 	rwhRj+7jSwN2IRhPKxREci94uPZWR2JLsTMxmKzdokFYT2GQDtoPTnjWTaQl7H+HLwmqPPTplHO 	M9ExGw6QBVkpbw+27NSx/AspTk7iiVj6K9oGRrgA9grYKtpSBe3+rDxfvyzsm4LUtsyR+DQNXn4 	AFFP3b8/lqiIoODpMgMI6HS3toIMppGw/BrkX3C8K6SJO3o4kN/JpKNERyFV8vAoRzKkQU=
X-Google-Smtp-Source: AGHT+IG/CLlNjoEeXqqCSqqj4fL806Db7a1DYqdpAMKbUKywm0zN5uM2fWirXPSE+NY3hA+7cOlanA==
X-Received: by 2002:a05:600c:314a:b0:434:a902:415b with SMTP id 5b1f17b1804b1-434a9dc3c69mr132703725e9.10.1732892789201;         Fri, 29 Nov 2024 07:06:29 -0800 (PST)
Return-Path: <neil.armstrong@linaro.org>
Received: from arrakeen.starnux.net ([2a01:e0a:982:cbb0:52eb:f6ff:feb3:451a])         by smtp.gmail.com with ESMTPSA id ffacd0b85a97d-385ccd2df65sm4759637f8f.6.2024.11.29.07.06.28         (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);         Fri, 29 Nov 2024 07:06:28 -0800 (PST)
From: Neil Armstrong <neil.armstrong@linaro.org>
Date: Fri, 29 Nov 2024 16:06:24 +0100
Subject: [PATCH v2 1/2] OPP: add index check to assert to avoid buffer  overflow in _read_freq()
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Message-Id: <20241129-topic-opp-fix-assert-index-check-v2-1-386b2dcbb9a6@linaro.org>
References: <20241129-topic-opp-fix-assert-index-check-v2-0-386b2dcbb9a6@linaro.org>
In-Reply-To: <20241129-topic-opp-fix-assert-index-check-v2-0-386b2dcbb9a6@linaro.org>
To: Viresh Kumar <vireshk@kernel.org>, Nishanth Menon <nm@ti.com>,   Stephen Boyd <sboyd@kernel.org>,   Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
Cc: Viresh Kumar <viresh.kumar@linaro.org>, linux-pm@vger.kernel.org,   linux-kernel@vger.kernel.org, Neil Armstrong <neil.armstrong@linaro.org>
X-Mailer: b4 0.14.2
X-Developer-Signature: v=1; a=openpgp-sha256; l=6914;  i=neil.armstrong@linaro.org; h=from:subject:message-id;  bh=/u6sYDXYCv4BGbywn/oNfwqHt8utKfq52QYTXp3e+3c=;  b=owEBbQKS/ZANAwAKAXfc29rIyEnRAcsmYgBnSdhyfIAtt2Us5TEz48JeKKiN037BLucClkJeywUC  f3FrfxaJAjMEAAEKAB0WIQQ9U8YmyFYF/h30LIt33NvayMhJ0QUCZ0nYcgAKCRB33NvayMhJ0V3/D/  9lvrF19yw5+SOaT4CecCdQVl2+OK/yiiyvIkIpqnlmbN0cMOFEmU/z+HJ44168KikpaeBIMrThNRQb  0oFt/8S/EfwYScFuIyRIeuB9DjHDEj1gNAJ+VD9zXtpfrnJjxu4AwzFDZhZRvnCQk0vv5+dmSce4Uw  m6yRWn6gIe8f0wepZAPHLC6iMBfqKgM2fwQBU/euPEJCetXcxnwjcq5/RwyPSJ4zym7OdZtXm0OLmD  4yogIQUjet/q13BTx76MW8vK5wj9Lo4n2SbjeqfX0ZT7dnXIGpB6zKsV+621DoR1aImOAp+x6T12Vr  ITbDiAQDgJNBAm4tu/ShaElfNIqlEBtWkY6VgvBFtjuheiAJ/mKv9/h7l7y1KcLBnDsxO7JexnUSoh  hwIOJvOqmUF0l5f0Og6r4f+7HoYu3EC40aktDbGqq+xnwI3qE1m5WI4hn6AbRSd0mv1m1tBk1akP80  wYyFFN5Zq7v8pNriAZgONuS7+g7yEuesb03S8ZZKhc/9bMtWuvIZjsGZwTOKMRrIRVA/P1H2U0nYYr  V44BDJczhK4d8eoYCYAZ0T8DpmtHJI/2ngQ6GmxViMh17p/lbGqRC1Zz5P7DjMeNF51M1z/u2VI2HT  G0EOAdqKFUk4mEYk3g16lA5KnEEvtKncTY/lsgWYJgpkTC5VCNx0lKtvedeQ==
X-Developer-Key: i=neil.armstrong@linaro.org; a=openpgp;  fpr=89EC3D058446217450F22848169AB7B1A4CFF8AE
Content-Length: 6743
Lines: 171

Pass the freq index to the assert function to make sure
we do not read a freq out of the opp->rates[] table when called
from the indexed variants:
dev_pm_opp_find_freq_exact_indexed() or
dev_pm_opp_find_freq_ceil/floor_indexed().

Add a secondary parameter to the assert function, unused
for assert_single_clk() then add assert_clk_index() which
will check for the clock index when called from the _indexed()
find functions.

Fixes: 142e17c1c2b4 ("OPP: Introduce dev_pm_opp_find_freq_{ceil/floor}_indexed() APIs")
Fixes: a5893928bb17 ("OPP: Add dev_pm_opp_find_freq_exact_indexed()")
Signed-off-by: Neil Armstrong <neil.armstrong@linaro.org>
---
 drivers/opp/core.c | 40 +++++++++++++++++++++++++---------------
 1 file changed, 25 insertions(+), 15 deletions(-)

diff --git a/drivers/opp/core.c b/drivers/opp/core.c
index d4a0030a0228d6282d672e3ffe3aeea27e80822a..52c6a45ceb7479c3ef0ed97ab43a37546d695c7f 100644
--- a/drivers/opp/core.c
+++ b/drivers/opp/core.c
@@ -101,11 +101,19 @@ struct opp_table *_find_opp_table(struct device *dev)
  * representation in the OPP table and manage the clock configuration themselves
  * in an platform specific way.
  */
-static bool assert_single_clk(struct opp_table *opp_table)
+static bool assert_single_clk(struct opp_table *opp_table, int __always_unused index)
 {
 	return !WARN_ON(opp_table->clk_count > 1);
 }
 
+/*
+ * Returns true if clock table is large enough to contain the clock index.
+ */
+static bool assert_clk_index(struct opp_table *opp_table, int index)
+{
+	return opp_table->clk_count > index;
+}
+
 /**
  * dev_pm_opp_get_bw() - Gets the bandwidth corresponding to an opp
  * @opp:	opp for which bandwidth has to be returned for
@@ -524,12 +532,12 @@ static struct dev_pm_opp *_opp_table_find_key(struct opp_table *opp_table,
 		unsigned long (*read)(struct dev_pm_opp *opp, int index),
 		bool (*compare)(struct dev_pm_opp **opp, struct dev_pm_opp *temp_opp,
 				unsigned long opp_key, unsigned long key),
-		bool (*assert)(struct opp_table *opp_table))
+		bool (*assert)(struct opp_table *opp_table, int index))
 {
 	struct dev_pm_opp *temp_opp, *opp = ERR_PTR(-ERANGE);
 
 	/* Assert that the requirement is met */
-	if (assert && !assert(opp_table))
+	if (assert && !assert(opp_table, index))
 		return ERR_PTR(-EINVAL);
 
 	mutex_lock(&opp_table->lock);
@@ -557,7 +565,7 @@ _find_key(struct device *dev, unsigned long *key, int index, bool available,
 	  unsigned long (*read)(struct dev_pm_opp *opp, int index),
 	  bool (*compare)(struct dev_pm_opp **opp, struct dev_pm_opp *temp_opp,
 			  unsigned long opp_key, unsigned long key),
-	  bool (*assert)(struct opp_table *opp_table))
+	  bool (*assert)(struct opp_table *opp_table, int index))
 {
 	struct opp_table *opp_table;
 	struct dev_pm_opp *opp;
@@ -580,7 +588,7 @@ _find_key(struct device *dev, unsigned long *key, int index, bool available,
 static struct dev_pm_opp *_find_key_exact(struct device *dev,
 		unsigned long key, int index, bool available,
 		unsigned long (*read)(struct dev_pm_opp *opp, int index),
-		bool (*assert)(struct opp_table *opp_table))
+		bool (*assert)(struct opp_table *opp_table, int index))
 {
 	/*
 	 * The value of key will be updated here, but will be ignored as the
@@ -593,7 +601,7 @@ static struct dev_pm_opp *_find_key_exact(struct device *dev,
 static struct dev_pm_opp *_opp_table_find_key_ceil(struct opp_table *opp_table,
 		unsigned long *key, int index, bool available,
 		unsigned long (*read)(struct dev_pm_opp *opp, int index),
-		bool (*assert)(struct opp_table *opp_table))
+		bool (*assert)(struct opp_table *opp_table, int index))
 {
 	return _opp_table_find_key(opp_table, key, index, available, read,
 				   _compare_ceil, assert);
@@ -602,7 +610,7 @@ static struct dev_pm_opp *_opp_table_find_key_ceil(struct opp_table *opp_table,
 static struct dev_pm_opp *_find_key_ceil(struct device *dev, unsigned long *key,
 		int index, bool available,
 		unsigned long (*read)(struct dev_pm_opp *opp, int index),
-		bool (*assert)(struct opp_table *opp_table))
+		bool (*assert)(struct opp_table *opp_table, int index))
 {
 	return _find_key(dev, key, index, available, read, _compare_ceil,
 			 assert);
@@ -611,7 +619,7 @@ static struct dev_pm_opp *_find_key_ceil(struct device *dev, unsigned long *key,
 static struct dev_pm_opp *_find_key_floor(struct device *dev,
 		unsigned long *key, int index, bool available,
 		unsigned long (*read)(struct dev_pm_opp *opp, int index),
-		bool (*assert)(struct opp_table *opp_table))
+		bool (*assert)(struct opp_table *opp_table, int index))
 {
 	return _find_key(dev, key, index, available, read, _compare_floor,
 			 assert);
@@ -672,7 +680,8 @@ struct dev_pm_opp *
 dev_pm_opp_find_freq_exact_indexed(struct device *dev, unsigned long freq,
 				   u32 index, bool available)
 {
-	return _find_key_exact(dev, freq, index, available, _read_freq, NULL);
+	return _find_key_exact(dev, freq, index, available, _read_freq,
+			       assert_clk_index);
 }
 EXPORT_SYMBOL_GPL(dev_pm_opp_find_freq_exact_indexed);
 
@@ -732,7 +741,8 @@ struct dev_pm_opp *
 dev_pm_opp_find_freq_ceil_indexed(struct device *dev, unsigned long *freq,
 				  u32 index)
 {
-	return _find_key_ceil(dev, freq, index, true, _read_freq, NULL);
+	return _find_key_ceil(dev, freq, index, true, _read_freq,
+			      assert_clk_index);
 }
 EXPORT_SYMBOL_GPL(dev_pm_opp_find_freq_ceil_indexed);
 
@@ -785,7 +795,7 @@ struct dev_pm_opp *
 dev_pm_opp_find_freq_floor_indexed(struct device *dev, unsigned long *freq,
 				   u32 index)
 {
-	return _find_key_floor(dev, freq, index, true, _read_freq, NULL);
+	return _find_key_floor(dev, freq, index, true, _read_freq, assert_clk_index);
 }
 EXPORT_SYMBOL_GPL(dev_pm_opp_find_freq_floor_indexed);
 
@@ -1727,7 +1737,7 @@ void dev_pm_opp_remove(struct device *dev, unsigned long freq)
 	if (IS_ERR(opp_table))
 		return;
 
-	if (!assert_single_clk(opp_table))
+	if (!assert_single_clk(opp_table, 0))
 		goto put_table;
 
 	mutex_lock(&opp_table->lock);
@@ -2079,7 +2089,7 @@ int _opp_add_v1(struct opp_table *opp_table, struct device *dev,
 	unsigned long tol, u_volt = data->u_volt;
 	int ret;
 
-	if (!assert_single_clk(opp_table))
+	if (!assert_single_clk(opp_table, 0))
 		return -EINVAL;
 
 	new_opp = _opp_allocate(opp_table);
@@ -2835,7 +2845,7 @@ static int _opp_set_availability(struct device *dev, unsigned long freq,
 		return r;
 	}
 
-	if (!assert_single_clk(opp_table)) {
+	if (!assert_single_clk(opp_table, 0)) {
 		r = -EINVAL;
 		goto put_table;
 	}
@@ -2911,7 +2921,7 @@ int dev_pm_opp_adjust_voltage(struct device *dev, unsigned long freq,
 		return r;
 	}
 
-	if (!assert_single_clk(opp_table)) {
+	if (!assert_single_clk(opp_table, 0)) {
 		r = -EINVAL;
 		goto put_table;
 	}

-- 
2.34.1

