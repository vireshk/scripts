From vireshk  Tue Apr 21 14:01:26 2020
Delivered-To: viresh.kumar@linaro.org
Received: from pop.gmail.com [172.217.194.108] 	by vireshk-i7 with POP3 (fetchmail-6.3.26) 	for <vireshk@localhost> (single-drop); Tue, 21 Apr 2020 14:01:26 +0530 (IST)
Received: by 2002:a5e:9603:0:0:0:0:0 with SMTP id a3csp4894775ioq;         Tue, 21 Apr 2020 01:30:25 -0700 (PDT)
X-Google-Smtp-Source: APiQypK3zvrbxByr+0LbRc+bUpl5fq5AySSuV0ZmjIRUD6JXI+qDmI07m5Do2G7DNHrt/I/zwNja
X-Received: by 2002:a1c:c30a:: with SMTP id t10mr3475291wmf.80.1587457825681;         Tue, 21 Apr 2020 01:30:25 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; t=1587457825; cv=none;         d=google.com; s=arc-20160816;         b=oa/l7Pet2eZyaCdHdYhT0lcBAGmhLBR2wvsZ2CHEmAlb1GiPvXm5s/k35160i/ngiK          lAE2XhJXtIYUAMKkxJ0UxNF18Oi9fougOebWlfAN14TMlxhm7YXQ4duliLD0g/uHhjC4          n3Z0uyzi91Sq44Okjh1PoamuHqXzpz91H0Y5LTr6ZHh9hMdZ29s+kjYzjp60SsptZeqF          MdKJ0qojYkwn2dKK/pOCk8JLgLl6fKiBnFBXSAtSiG83N8yZcqYA3zapKGWIjjBwhfG/          4TGxPBvzmqdIepfvJp43ZCA3/0LxHK/k6k3xjdRvBaPZx2iZmd98y4+lh/PwTo7Q1Rxh          TElA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;         h=message-id:date:subject:cc:to:from;         bh=U+TC/xh1odMOYFrJFZf+7fy8kP6ke7CmUBNP6Xp+488=;         b=hsqr5Xk8umLoP42+/JblqjhuaolUH+p0kk/JyGaHOCmiv0aIw42s2wxY0JhFhukm8V          CrTkNWFV0BPibv+e/59Ul0TKXN97tepBOkshxGqv6IOD6iZF19tymEHxLQywePgkRkl/          jSHi6jbtS4PuRb3G+1JU3deK9e5aiI2ABOL0Sq3rKOh72QJZ8Y16YrKcsDsT4Od6KuCu          1pPRx3JUli+u/g9/Rj4rv/7eMerVgkCZjZw4t51vTjsWon7tKG+a2GlDMjLT1QkQMXgH          fE+E6CyuGgoBW6e/VxsV9XnqMU8BtcCh4sCu3pANTtksVLPFtz/X2HM6UMt7/ge8yPzq          g9sw==
ARC-Authentication-Results: i=1; mx.google.com;        spf=pass (google.com: domain of ykaukab@suse.de designates 195.135.220.15 as permitted sender) smtp.mailfrom=ykaukab@suse.de
Return-Path: <ykaukab@suse.de>
Received: from mx2.suse.de (mx2.suse.de. [195.135.220.15])         by mx.google.com with ESMTPS id u11si1839823wmb.190.2020.04.21.01.30.25         for <viresh.kumar@linaro.org>         (version=TLS1_2 cipher=ECDHE-ECDSA-AES128-GCM-SHA256 bits=128/128);         Tue, 21 Apr 2020 01:30:25 -0700 (PDT)
Received-SPF: pass (google.com: domain of ykaukab@suse.de designates 195.135.220.15 as permitted sender) client-ip=195.135.220.15;
Authentication-Results: mx.google.com;        spf=pass (google.com: domain of ykaukab@suse.de designates 195.135.220.15 as permitted sender) smtp.mailfrom=ykaukab@suse.de
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254]) 	by mx2.suse.de (Postfix) with ESMTP id BB346AD2C; 	Tue, 21 Apr 2020 08:30:23 +0000 (UTC)
From: Mian Yousaf Kaukab <ykaukab@suse.de>
To: linux-pm@vger.kernel.org, 	andy.tang@nxp.com, 	sboyd@kernel.org, 	linux-clk@vger.kernel.org, 	rjw@rjwysocki.net, 	shawnguo@kernel.org, 	leoyang.li@nxp.com
Cc: viresh.kumar@linaro.org, 	linux-kernel@vger.kernel.org, 	linux-arm-kernel@lists.infradead.org, 	linuxppc-dev@lists.ozlabs.org, 	Mian Yousaf Kaukab <ykaukab@suse.de>
Subject: [PATCH v2 1/2] cpufreq: qoriq: convert to a platform driver
Date: Tue, 21 Apr 2020 10:29:59 +0200
Message-Id: <20200421083000.16740-1-ykaukab@suse.de>
X-Mailer: git-send-email 2.16.4
X-Label: apply
Status: RO
X-Status: A
Content-Length: 4251
Lines: 141

The driver has to be manually loaded if it is built as a module. It
is neither exporting MODULE_DEVICE_TABLE nor MODULE_ALIAS. Moreover,
no platform-device is created (and thus no uevent is sent) for the
clockgen nodes it depends on.

Convert the module to a platform driver with its own alias. Moreover,
drop whitelisted SOCs. Platform device will be created only for the
compatible platforms.

Reviewed-by: Yuantian Tang <andy.tang@nxp.com>
Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
Signed-off-by: Mian Yousaf Kaukab <ykaukab@suse.de>
---
v2:
 +Rafael, Stephen, linux-clk
 Add Reviewed-by and Acked-by tags

 drivers/cpufreq/qoriq-cpufreq.c | 76 ++++++++++++++++-------------------------
 1 file changed, 29 insertions(+), 47 deletions(-)

diff --git a/drivers/cpufreq/qoriq-cpufreq.c b/drivers/cpufreq/qoriq-cpufreq.c
index 8e436dc75c8b..6b6b20da2bcf 100644
--- a/drivers/cpufreq/qoriq-cpufreq.c
+++ b/drivers/cpufreq/qoriq-cpufreq.c
@@ -18,6 +18,7 @@
 #include <linux/of.h>
 #include <linux/slab.h>
 #include <linux/smp.h>
+#include <linux/platform_device.h>
 
 /**
  * struct cpu_data
@@ -29,12 +30,6 @@ struct cpu_data {
 	struct cpufreq_frequency_table *table;
 };
 
-/*
- * Don't use cpufreq on this SoC -- used when the SoC would have otherwise
- * matched a more generic compatible.
- */
-#define SOC_BLACKLIST		1
-
 /**
  * struct soc_data - SoC specific data
  * @flags: SOC_xxx
@@ -264,64 +259,51 @@ static struct cpufreq_driver qoriq_cpufreq_driver = {
 	.attr		= cpufreq_generic_attr,
 };
 
-static const struct soc_data blacklist = {
-	.flags = SOC_BLACKLIST,
-};
-
-static const struct of_device_id node_matches[] __initconst = {
+static const struct of_device_id qoriq_cpufreq_blacklist[] = {
 	/* e6500 cannot use cpufreq due to erratum A-008083 */
-	{ .compatible = "fsl,b4420-clockgen", &blacklist },
-	{ .compatible = "fsl,b4860-clockgen", &blacklist },
-	{ .compatible = "fsl,t2080-clockgen", &blacklist },
-	{ .compatible = "fsl,t4240-clockgen", &blacklist },
-
-	{ .compatible = "fsl,ls1012a-clockgen", },
-	{ .compatible = "fsl,ls1021a-clockgen", },
-	{ .compatible = "fsl,ls1028a-clockgen", },
-	{ .compatible = "fsl,ls1043a-clockgen", },
-	{ .compatible = "fsl,ls1046a-clockgen", },
-	{ .compatible = "fsl,ls1088a-clockgen", },
-	{ .compatible = "fsl,ls2080a-clockgen", },
-	{ .compatible = "fsl,lx2160a-clockgen", },
-	{ .compatible = "fsl,p4080-clockgen", },
-	{ .compatible = "fsl,qoriq-clockgen-1.0", },
-	{ .compatible = "fsl,qoriq-clockgen-2.0", },
+	{ .compatible = "fsl,b4420-clockgen", },
+	{ .compatible = "fsl,b4860-clockgen", },
+	{ .compatible = "fsl,t2080-clockgen", },
+	{ .compatible = "fsl,t4240-clockgen", },
 	{}
 };
 
-static int __init qoriq_cpufreq_init(void)
+static int qoriq_cpufreq_probe(struct platform_device *pdev)
 {
 	int ret;
-	struct device_node  *np;
-	const struct of_device_id *match;
-	const struct soc_data *data;
-
-	np = of_find_matching_node(NULL, node_matches);
-	if (!np)
-		return -ENODEV;
-
-	match = of_match_node(node_matches, np);
-	data = match->data;
-
-	of_node_put(np);
+	struct device_node *np;
 
-	if (data && data->flags & SOC_BLACKLIST)
+	np = of_find_matching_node(NULL, qoriq_cpufreq_blacklist);
+	if (np) {
+		dev_info(&pdev->dev, "Disabling due to erratum A-008083");
 		return -ENODEV;
+	}
 
 	ret = cpufreq_register_driver(&qoriq_cpufreq_driver);
-	if (!ret)
-		pr_info("Freescale QorIQ CPU frequency scaling driver\n");
+	if (ret)
+		return ret;
 
-	return ret;
+	dev_info(&pdev->dev, "Freescale QorIQ CPU frequency scaling driver\n");
+	return 0;
 }
-module_init(qoriq_cpufreq_init);
 
-static void __exit qoriq_cpufreq_exit(void)
+static int qoriq_cpufreq_remove(struct platform_device *pdev)
 {
 	cpufreq_unregister_driver(&qoriq_cpufreq_driver);
+
+	return 0;
 }
-module_exit(qoriq_cpufreq_exit);
 
+static struct platform_driver qoriq_cpufreq_platform_driver = {
+	.driver = {
+		.name = "qoriq-cpufreq",
+	},
+	.probe = qoriq_cpufreq_probe,
+	.remove = qoriq_cpufreq_remove,
+};
+module_platform_driver(qoriq_cpufreq_platform_driver);
+
+MODULE_ALIAS("platform:qoriq-cpufreq");
 MODULE_LICENSE("GPL");
 MODULE_AUTHOR("Tang Yuantian <Yuantian.Tang@freescale.com>");
 MODULE_DESCRIPTION("cpufreq driver for Freescale QorIQ series SoCs");
-- 
2.16.4

