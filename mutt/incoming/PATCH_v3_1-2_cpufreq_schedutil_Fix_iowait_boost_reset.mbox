From vireshk  Mon May 21 14:22:41 2018
Delivered-To: viresh.kumar@linaro.org
Received: from gmail-pop.l.google.com [74.125.24.109] 	by vireshk-i7 with POP3 (fetchmail-6.3.26) 	for <vireshk@localhost> (single-drop); Mon, 21 May 2018 14:22:41 +0530 (IST)
Received: by 2002:a02:878f:0:0:0:0:0 with SMTP id t15-v6csp39251jai;         Mon, 21 May 2018 01:51:39 -0700 (PDT)
X-Google-Smtp-Source: AB8JxZrF28fjHcICVu+olSOQiydnrfyVaKxFHoW8UE3bW6pJK1t4CbIh+eulOGvPVfXsn+kpzsO4
X-Received: by 2002:a9d:26a2:: with SMTP id l31-v6mr13142398otb.303.1526892699113;         Mon, 21 May 2018 01:51:39 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; t=1526892699; cv=none;         d=google.com; s=arc-20160816;         b=mtubwRdeif472cqyKfGWq+zKjGLWoEYaJKq1fzuM47kYhj86HmTQILy6hQsNJaEw/l          uXo/i1/hwHIasRb3lUmNKPV9/S2FEPm6JIywnE0ZL7/u8SGS7R728A0HiXdOCgIgs/2P          9k+jSG9xjffpbRZJqzG44K1J/iyh5DhfCmg57Vk4slHSuwPyaFupdMxrsxWAN5u1cVRk          58QNjVZQdl4GRwNsxkwJiWH6XmasHOXaQSCUPgX9EoVhXk17dunISsDfR2bINkNSLPfU          v5aPnuWrXyucMrmKuuQvmqRnupTivEeVmC/8a70CzeWxIB/j82sD/hgSO6pM9TYlkL32          Gkvg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;         h=references:in-reply-to:message-id:date:subject:cc:to:from          :arc-authentication-results;         bh=0c7eTCHpPS2XccWgFGymVk/nhVVXL7Dv9CWn64hZMaA=;         b=hXXpjn4/ncjWw1qJiNtKkWvjVANn8bMp9r2hf/v/xux/xbwLYCAOXhinVHK0sh9U9a          rQOYmScQ8fKkWXUp1C+z2tru9p/K0exs/H4oqypHFsfBPICr8vknhgwiR/ZJ56Cgiy57          rXPHTtu4CY0sYZ8I809a9sE+b0Tw0HmjvrZteSpv4Hbv1N5mNiEueUE4Nvj4JbBZtuLF          Cm2xjNLgJN+R1jmVfsre7IQ3ZOqAqmG6d3t93k37Azw1vzbTo1dVLLlfyRj+tv7tp0+t          3yJRI3BcdgjwKTkDcoDFt4Jba0Qel0ewLt/VqAkX2qdJgMx+cEyFM0e45Jh6h+Eiy+9Y          L4Rw==
ARC-Authentication-Results: i=1; mx.google.com;        spf=pass (google.com: domain of patrick.bellasi@arm.com designates 217.140.101.70 as permitted sender) smtp.mailfrom=patrick.bellasi@arm.com
Return-Path: <patrick.bellasi@arm.com>
Received: from foss.arm.com (foss.arm.com. [217.140.101.70])         by mx.google.com with ESMTP id o23-v6si5185829oto.55.2018.05.21.01.51.38;         Mon, 21 May 2018 01:51:39 -0700 (PDT)
Received-SPF: pass (google.com: domain of patrick.bellasi@arm.com designates 217.140.101.70 as permitted sender) client-ip=217.140.101.70;
Authentication-Results: mx.google.com;        spf=pass (google.com: domain of patrick.bellasi@arm.com designates 217.140.101.70 as permitted sender) smtp.mailfrom=patrick.bellasi@arm.com
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249]) 	by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id AEB871529; 	Mon, 21 May 2018 01:51:38 -0700 (PDT)
Received: from e110439-lin.cambridge.arm.com (e110439-lin.cambridge.arm.com [10.1.210.68]) 	by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPA id C16B73F25D; 	Mon, 21 May 2018 01:51:36 -0700 (PDT)
From: Patrick Bellasi <patrick.bellasi@arm.com>
To: linux-kernel@vger.kernel.org, 	linux-pm@vger.kernel.org
Cc: Ingo Molnar <mingo@redhat.com>, 	Peter Zijlstra <peterz@infradead.org>, 	"Rafael J . Wysocki" <rafael.j.wysocki@intel.com>, 	Viresh Kumar <viresh.kumar@linaro.org>, 	Vincent Guittot <vincent.guittot@linaro.org>, 	Dietmar Eggemann <dietmar.eggemann@arm.com>, 	Juri Lelli <juri.lelli@redhat.com>, 	Joel Fernandes <joelaf@google.com>
Subject: [PATCH v3 1/2] cpufreq: schedutil: Fix iowait boost reset
Date: Mon, 21 May 2018 09:51:19 +0100
Message-Id: <20180521085120.7902-2-patrick.bellasi@arm.com>
X-Mailer: git-send-email 2.15.1
In-Reply-To: <20180521085120.7902-1-patrick.bellasi@arm.com>
References: <20180521085120.7902-1-patrick.bellasi@arm.com>
Status: RO
X-Status: A
Content-Length: 3369
Lines: 93

A more energy efficient update of the IO wait boosting mechanism has
been introduced in:

   commit a5a0809bc58e ("cpufreq: schedutil: Make iowait boost more energy efficient")

where the boost value is expected to be:

 - doubled at each successive wakeup from IO
   staring from the minimum frequency supported by a CPU

 - reset when a CPU is not updated for more then one tick
   by either disabling the IO wait boost or resetting its value to the
   minimum frequency if this new update requires an IO boost.

This approach is supposed to "ignore" boosting for sporadic wakeups from
IO, while still getting the frequency boosted to the maximum to benefit
long sequence of wakeup from IO operations.

However, these assumptions are not always satisfied.
For example, when an IO boosted CPU enters idle for more the one tick
and then wakes up after an IO wait, since in sugov_set_iowait_boost() we
first check the IOWAIT flag, we keep doubling the iowait boost instead
of restarting from the minimum frequency value.

This misbehavior could happen mainly on non-shared frequency domains,
thus defeating the energy efficiency optimization, but it can also
happen on shared frequency domain systems.

Let fix this issue in sugov_set_iowait_boost() by:
 - first check the IO wait boost reset conditions
   to eventually reset the boost value
 - then applying the correct IO boost value
   if required by the caller

Reported-by: Viresh Kumar <viresh.kumar@linaro.org>
Signed-off-by: Patrick Bellasi <patrick.bellasi@arm.com>
Cc: Ingo Molnar <mingo@redhat.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Cc: Viresh Kumar <viresh.kumar@linaro.org>
Cc: Joel Fernandes <joelaf@google.com>
Cc: Juri Lelli <juri.lelli@redhat.com>
Cc: Dietmar Eggemann <dietmar.eggemann@arm.com>
Cc: linux-kernel@vger.kernel.org
Cc: linux-pm@vger.kernel.org
Fixes: a5a0809bc58e ("cpufreq: schedutil: Make iowait boost more energy efficient")

---
Changes in v3:
 - split the fix into a separated patch (this one)
 - added "Fixes" tag (Viresh)
---
 kernel/sched/cpufreq_schedutil.c | 18 ++++++++++--------
 1 file changed, 10 insertions(+), 8 deletions(-)

diff --git a/kernel/sched/cpufreq_schedutil.c b/kernel/sched/cpufreq_schedutil.c
index e13df951aca7..c4063e578e4d 100644
--- a/kernel/sched/cpufreq_schedutil.c
+++ b/kernel/sched/cpufreq_schedutil.c
@@ -203,6 +203,16 @@ static unsigned long sugov_aggregate_util(struct sugov_cpu *sg_cpu)
 
 static void sugov_set_iowait_boost(struct sugov_cpu *sg_cpu, u64 time, unsigned int flags)
 {
+	/* Clear iowait_boost if the CPU apprears to have been idle. */
+	if (sg_cpu->iowait_boost) {
+		s64 delta_ns = time - sg_cpu->last_update;
+
+		if (delta_ns > TICK_NSEC) {
+			sg_cpu->iowait_boost = 0;
+			sg_cpu->iowait_boost_pending = false;
+		}
+	}
+
 	if (flags & SCHED_CPUFREQ_IOWAIT) {
 		if (sg_cpu->iowait_boost_pending)
 			return;
@@ -216,14 +226,6 @@ static void sugov_set_iowait_boost(struct sugov_cpu *sg_cpu, u64 time, unsigned
 		} else {
 			sg_cpu->iowait_boost = sg_cpu->sg_policy->policy->min;
 		}
-	} else if (sg_cpu->iowait_boost) {
-		s64 delta_ns = time - sg_cpu->last_update;
-
-		/* Clear iowait_boost if the CPU apprears to have been idle. */
-		if (delta_ns > TICK_NSEC) {
-			sg_cpu->iowait_boost = 0;
-			sg_cpu->iowait_boost_pending = false;
-		}
 	}
 }
 
-- 
2.15.1

