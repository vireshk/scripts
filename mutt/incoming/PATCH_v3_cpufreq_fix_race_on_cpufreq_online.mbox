From vireshk  Wed May 11 07:48:27 2022
Delivered-To: viresh.kumar@linaro.org
Received: from pop.gmail.com [142.250.4.108] 	by vireshk-i7 with POP3 (fetchmail-6.4.2) 	for <vireshk@localhost> (single-drop); Wed, 11 May 2022 07:48:27 +0530 (IST)
Received: by 2002:a5e:8b42:0:0:0:0:0 with SMTP id z2csp6002018iom;         Tue, 10 May 2022 08:42:48 -0700 (PDT)
X-Received: by 2002:a02:9f8c:0:b0:32b:ab5:830c with SMTP id a12-20020a029f8c000000b0032b0ab5830cmr10550826jam.86.1652197368378;         Tue, 10 May 2022 08:42:48 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; t=1652197368; cv=none;         d=google.com; s=arc-20160816;         b=TdDC1Hp8pbZzP53Z8wnOFOwft32iTaD8UN1M0RflU+Dr7VClK2yiWnkN0CBxBAZ+71          80ZsRFxYCT5BxRr11WGYYFHPnBE1yyZcSwO0AeaWl3qsFdIw/YjXgRkTKCkDdjK6rQjs          FygoWsBiaxMCM6NT/yC+dQsLaxykWd6I+YQzVPnkdeRE+3CTXspY65nYqBr3tTgGQ+4a          YpMVt/qUu9R2BUyChiGpqR75F/aRoRld+0gN5qzN6xPj8l42pv9boZEodj61eg8WNmAk          cO7tSc9QHIOMf/J3rHrhrcjtAsrUOVNYGmnkBBZAMeDc42kDc1t1kjkxa1fsHFfKxYcR          dcbQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;         h=content-transfer-encoding:mime-version:references:in-reply-to          :message-id:date:subject:cc:to:from:dkim-signature;         bh=v2rG2ZonGqmcTKkQBsuORfQrqsivhm0tmLUtFBAJyAo=;         b=E+7ZA3AQ3vlW9V/NAPMU+4nN++mLh/YLIpsFg7TylZhnKqbjaPq5lx5jkO3GgAyd74          ykEEXTjkevtjqMF76cURYweUDMepF9EdheupdBzOKPtgRGIc8zK+H4l4x1LKd8fTz3K4          k5Ba14EOQP/gcCqp/+DieE4BaXv4OgKmLYTFprR+/VolyCxqFuF/wEVOVeHEq3s9/uvp          mD2WLWhVTMwt6f1p07FDlFKOgMyVc2hJbAcmlcKx+r8Z2bRgE3H2kSTFI0OwbJEK/sui          wnjkMpzuQHu77C2DbHb+WKCKGBPYgTF11GP8vN9+oEVD47lO8V3Bm0/d9b7Dic4CWWSU          1rgQ==
ARC-Authentication-Results: i=1; mx.google.com;        dkim=pass header.i=@gmail.com header.s=20210112 header.b="KkmDf/x3";        spf=pass (google.com: domain of schspa@gmail.com designates 209.85.220.41 as permitted sender) smtp.mailfrom=schspa@gmail.com;        dmarc=pass (p=NONE sp=QUARANTINE dis=NONE) header.from=gmail.com
Return-Path: <schspa@gmail.com>
Received: from mail-sor-f41.google.com (mail-sor-f41.google.com. [209.85.220.41])         by mx.google.com with SMTPS id s20-20020a92ae14000000b002ca0e74a56bsor5105994ilh.111.2022.05.10.08.42.48         for <viresh.kumar@linaro.org>         (Google Transport Security);         Tue, 10 May 2022 08:42:48 -0700 (PDT)
Received-SPF: pass (google.com: domain of schspa@gmail.com designates 209.85.220.41 as permitted sender) client-ip=209.85.220.41;
Authentication-Results: mx.google.com;        dkim=pass header.i=@gmail.com header.s=20210112 header.b="KkmDf/x3";        spf=pass (google.com: domain of schspa@gmail.com designates 209.85.220.41 as permitted sender) smtp.mailfrom=schspa@gmail.com;        dmarc=pass (p=NONE sp=QUARANTINE dis=NONE) header.from=gmail.com
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;         d=gmail.com; s=20210112;         h=from:to:cc:subject:date:message-id:in-reply-to:references          :mime-version:content-transfer-encoding;         bh=v2rG2ZonGqmcTKkQBsuORfQrqsivhm0tmLUtFBAJyAo=;         b=KkmDf/x3u/7PriJ/qWykqpS2fZfsk+Jx4H75SBzbfvV8P9CUQJh2t3x7vOp7Z5KAP+          Gsp6NJgLT3wN79LjsXqfonm9BvVOp60fFRr9++TCGXx8GeDZ47IgK/+lebG55s6V+Wkc          mBqxSAjzdX/HK6n8rf7INPRJaZkUYRVycsxNqR26GqRxy6oyv57yIZhD8cORh6LRvMRP          /3hT/dCNpCjSgMsE+7Z0O0ubjETjX/S6FaJvasbZWKdPcfz8XzSTzX8gyncPDgSlStev          OG/EPT2kE6wFYcbnXPNbcNQ5G5KDBImNIEGZR/JYwnEzhpbPcX76qq3G+EoYqpxuIr1p          ioGQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;         d=1e100.net; s=20210112;         h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to          :references:mime-version:content-transfer-encoding;         bh=v2rG2ZonGqmcTKkQBsuORfQrqsivhm0tmLUtFBAJyAo=;         b=P005sbrta54ZES3arIa3BlHyrYs6PXVE057ZCkugp5jbju+0/QGm6eKjoSfO77mGZU          9PT2Pg/kKi+atE53M6xJ/WsmbtmgKWAnKNGXyGqRzuKXKevNQd407EU2evlOaYzBDhEB          K6vX2dwsIVsf72qXMOZldXNdy8AuVqM7AT/m2lRtnEij5jMe9EJJTFiCk8Enx41WbFQG          1mEipAcIAm5H9/FrkZPHdqnCD6qv3MVdDj0r53CiIIOPr9Xb5vvz+ZLVeKUR5hTYPIxl          QDBxXIXKUHIFAi6EusCd3vmYMQdHDQcTMFATo102+xa2h/m/EdaV3tg85pxwrowZWW2W          +JtQ==
X-Gm-Message-State: AOAM530BcStoHEaJQtZKsp3hPDlk9sf/RgIpwAeoM9u7SMfbFOPfLnPn 	gf+PRliZJOFgVRr0NZ6kESHijySQnBwfKA==
X-Google-Smtp-Source: ABdhPJy8JEyKuuGwsF8dyWch0XhpqkGP9xMJVmgiHuJfW4VuiQHawfhnTlgI0z/LnQk/jYYCm7mQxg==
X-Received: by 2002:a05:6e02:2146:b0:2cf:87ae:ddb0 with SMTP id d6-20020a056e02214600b002cf87aeddb0mr8438621ilv.188.1652197367963;         Tue, 10 May 2022 08:42:47 -0700 (PDT)
Return-Path: <schspa@gmail.com>
Received: from localhost (ec2-13-59-0-164.us-east-2.compute.amazonaws.com. [13.59.0.164])         by smtp.gmail.com with UTF8SMTPSA id y12-20020a92090c000000b002cde6e352d1sm4001307ilg.27.2022.05.10.08.42.44         (version=TLS1_3 cipher=TLS_AES_128_GCM_SHA256 bits=128/128);         Tue, 10 May 2022 08:42:47 -0700 (PDT)
From: Schspa Shi <schspa@gmail.com>
To: viresh.kumar@linaro.org
Cc: linux-kernel@vger.kernel.org, 	linux-pm@vger.kernel.org, 	rafael@kernel.org, 	schspa@gmail.com
Subject: [PATCH v3] cpufreq: fix race on cpufreq online
Date: Tue, 10 May 2022 23:42:36 +0800
Message-Id: <20220510154236.88753-1-schspa@gmail.com>
X-Mailer: git-send-email 2.24.3 (Apple Git-128)
In-Reply-To: <20220510035259.5ep52sgahd2a6rie@vireshk-i7>
References: <20220510035259.5ep52sgahd2a6rie@vireshk-i7>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Length: 3521
Lines: 122

When cpufreq online failed, policy->cpus are not empty while
cpufreq sysfs file available, we may access some data freed.

Take policy->clk as an example:

static int cpufreq_online(unsigned int cpu)
{
  ...
  // policy->cpus != 0 at this time
  down_write(&policy->rwsem);
  ret = cpufreq_add_dev_interface(policy);
  up_write(&policy->rwsem);

  down_write(&policy->rwsem);
  ...
  /* cpufreq nitialization fails in some cases */
  if (cpufreq_driver->get && has_target()) {
    policy->cur = cpufreq_driver->get(policy->cpu);
    if (!policy->cur) {
      ret = -EIO;
      pr_err("%s: ->get() failed\n", __func__);
      goto out_destroy_policy;
    }
  }
  ...
  up_write(&policy->rwsem);
  ...

  return 0;

out_destroy_policy:
	for_each_cpu(j, policy->real_cpus)
		remove_cpu_dev_symlink(policy, get_cpu_device(j));
    up_write(&policy->rwsem);
...
out_exit_policy:
  if (cpufreq_driver->exit)
    cpufreq_driver->exit(policy);
      clk_put(policy->clk);
      // policy->clk is a wild pointer
...
                                    ^
                                    |
                            Another process access
                            __cpufreq_get
                              cpufreq_verify_current_freq
                                cpufreq_generic_get
                                  // acces wild pointer of policy->clk;
                                    |
                                    |
out_offline_policy:                 |
  cpufreq_policy_free(policy);      |
    // deleted here, and will wait for no body reference
    cpufreq_policy_put_kobj(policy);
}

We can fix it by clear the policy->cpus mask.
Both show_scaling_cur_freq and show_cpuinfo_cur_freq will return an
error by checking this mask, thus avoiding UAF.

Signed-off-by: Schspa Shi <schspa@gmail.com>

---

Changelog:
v1 -> v2:
        - Fix bad critical region enlarge which causes uninitialized
          unlock.
v2 -> v3:
        - Remove the missed down_write() before
          cpumask_and(policy->cpus, policy->cpus, cpu_online_mask);

Signed-off-by: Schspa Shi <schspa@gmail.com>
---
 drivers/cpufreq/cpufreq.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index 80f535cc8a75..d93958dbdab8 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -1337,12 +1337,12 @@ static int cpufreq_online(unsigned int cpu)
 		down_write(&policy->rwsem);
 		policy->cpu = cpu;
 		policy->governor = NULL;
-		up_write(&policy->rwsem);
 	} else {
 		new_policy = true;
 		policy = cpufreq_policy_alloc(cpu);
 		if (!policy)
 			return -ENOMEM;
+		down_write(&policy->rwsem);
 	}
 
 	if (!new_policy && cpufreq_driver->online) {
@@ -1382,7 +1382,6 @@ static int cpufreq_online(unsigned int cpu)
 		cpumask_copy(policy->related_cpus, policy->cpus);
 	}
 
-	down_write(&policy->rwsem);
 	/*
 	 * affected cpus must always be the one, which are online. We aren't
 	 * managing offline cpus here.
@@ -1533,7 +1532,7 @@ static int cpufreq_online(unsigned int cpu)
 	for_each_cpu(j, policy->real_cpus)
 		remove_cpu_dev_symlink(policy, get_cpu_device(j));
 
-	up_write(&policy->rwsem);
+	cpumask_clear(policy->cpus);
 
 out_offline_policy:
 	if (cpufreq_driver->offline)
@@ -1542,6 +1541,7 @@ static int cpufreq_online(unsigned int cpu)
 out_exit_policy:
 	if (cpufreq_driver->exit)
 		cpufreq_driver->exit(policy);
+	up_write(&policy->rwsem);
 
 out_free_policy:
 	cpufreq_policy_free(policy);
-- 
2.24.3 (Apple Git-128)

