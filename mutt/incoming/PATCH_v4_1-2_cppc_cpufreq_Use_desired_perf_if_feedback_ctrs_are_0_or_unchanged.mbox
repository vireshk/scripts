From vireshk  Tue Oct  1 09:04:31 2024
Delivered-To: viresh.kumar@linaro.org
Received: from pop.gmail.com [142.251.175.108] 	by vireshk-i7 with POP3 (fetchmail-6.4.2) 	for <vireshk@localhost> (single-drop); Tue, 01 Oct 2024 09:04:31 +0530 (IST)
Received: by 2002:a05:7208:108:b0:8b:2085:db5e with SMTP id 8csp1146352rbe;         Sat, 28 Sep 2024 20:38:21 -0700 (PDT)
X-Google-Smtp-Source: AGHT+IExZbLrlMKe8H/MldJRFx0tF3uwmiTNj4vZ9z7SBI63gqSXOqaVjAk4gDRaxOAN/NA4f2sA
X-Received: by 2002:a17:90a:784f:b0:2d8:719d:98a2 with SMTP id 98e67ed59e1d1-2e0b716e419mr12782902a91.7.1727581101395;         Sat, 28 Sep 2024 20:38:21 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; t=1727581101; cv=none;         d=google.com; s=arc-20240605;         b=LPlm308oM57RJu7EGY3NQovsdc64XqtzdF1CdkB++oudgwxIbIk6Cd45qlHzzTJl0Y          6M1h/geXJAuqggoLEflgasXG1QlkAumyJGFuoEZLGHrvOLWSZ9luoek7SasjaTBefPen          mjDks/WySksimqE2D0I/wEsKX+joanLLIKSa8LnY+wWGPbV1lYctMmK+FyESlCFmXZmR          CjHe7LcqKt8K+o5xc6S29dlj8X2LVdKZh7Vx+v5HXsMtkCYJwq/GK8U81e/qHb8zEa2t          6y4XSMN13SNtQDmsZKDJfvjwugdYcVSV2zDVcmWIFyM1sBSzrNWuK2M+9gliH23i9Rya          qLWA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20240605;         h=content-transfer-encoding:mime-version:references:in-reply-to          :message-id:date:subject:cc:to:from;         bh=FVK4gRe7FyVKWuyUOuDi3sNi6/4oH0s8VmW/9s1Il3Y=;         fh=ZbLkHnH4EQSWTWm5mPvoamIDBa1EVSWiWvVXJ/SePXY=;         b=JkVjD+zigVFmX9eM8t/CJMlrVxZW5Wv+2U+JK/CMuADPaGX3/NzPj8w0ZoRS/DBFJY          F/dBrHigY8V4MB+k/HPSp66k8/ypUV+EveiX1GzYYnj92Fy5ptaCfT2Ayw05lz1Rck3+          lk8Jpq4k8x2YH7gnMN0e+AJ7PKwgcgly7hD+N7zNqPUIKk0WGiVe8ICEYZmbb24boMpD          z4HckYd3qDPVQgoiNuPUVWF1BWzBhU7fiqddm6GgouL5AhYrYCUrYEZLT7LM1yX8DUYL          yU/Q8x8c7XiTQ04i4ttw9qgsGzhk+Nx4AKcpgzO+i0qosDXcslrzUlY3zWpupZr+9zs+          KoHQ==;         dara=google.com
ARC-Authentication-Results: i=1; mx.google.com;        spf=pass (google.com: domain of zhanjie9@hisilicon.com designates 45.249.212.190 as permitted sender) smtp.mailfrom=zhanjie9@hisilicon.com;        dmarc=pass (p=QUARANTINE sp=QUARANTINE dis=NONE) header.from=hisilicon.com
Return-Path: <zhanjie9@hisilicon.com>
Received: from szxga04-in.huawei.com (szxga04-in.huawei.com. [45.249.212.190])         by mx.google.com with ESMTPS id 98e67ed59e1d1-2e0a3ed293asi2402440a91.35.2024.09.28.20.38.19         for <viresh.kumar@linaro.org>         (version=TLS1_2 cipher=ECDHE-ECDSA-AES128-GCM-SHA256 bits=128/128);         Sat, 28 Sep 2024 20:38:21 -0700 (PDT)
Received-SPF: pass (google.com: domain of zhanjie9@hisilicon.com designates 45.249.212.190 as permitted sender) client-ip=45.249.212.190;
Authentication-Results: mx.google.com;        spf=pass (google.com: domain of zhanjie9@hisilicon.com designates 45.249.212.190 as permitted sender) smtp.mailfrom=zhanjie9@hisilicon.com;        dmarc=pass (p=QUARANTINE sp=QUARANTINE dis=NONE) header.from=hisilicon.com
Received: from mail.maildlp.com (unknown [172.19.88.214]) 	by szxga04-in.huawei.com (SkyGuard) with ESMTP id 4XGVJN1dDmz2Dchg; 	Sun, 29 Sep 2024 11:37:24 +0800 (CST)
Received: from dggpeml500019.china.huawei.com (unknown [7.185.36.137]) 	by mail.maildlp.com (Postfix) with ESMTPS id 579371A016C; 	Sun, 29 Sep 2024 11:38:16 +0800 (CST)
Received: from localhost.localdomain (10.90.30.45) by  dggpeml500019.china.huawei.com (7.185.36.137) with Microsoft SMTP Server  (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id  15.1.2507.39; Sun, 29 Sep 2024 11:38:16 +0800
From: Jie Zhan <zhanjie9@hisilicon.com>
To: <viresh.kumar@linaro.org>, <rafael@kernel.org>, <ionela.voinescu@arm.com>, 	<beata.michalska@arm.com>, <wangxiongfeng2@huawei.com>
CC: <linux-pm@vger.kernel.org>, <linux-acpi@vger.kernel.org>, 	<linux-arm-kernel@lists.infradead.org>, <linuxarm@huawei.com>, 	<zhanjie9@hisilicon.com>, <jonathan.cameron@huawei.com>, 	<wanghuiqiang@huawei.com>, <zhenglifeng1@huawei.com>, <lihuisong@huawei.com>, 	<yangyicong@huawei.com>, <liaochang1@huawei.com>, <zengheng4@huawei.com>
Subject: [PATCH v4 1/2] cppc_cpufreq: Use desired perf if feedback ctrs are 0 or unchanged
Date: Sun, 29 Sep 2024 11:32:13 +0800
Message-ID: <20240929033214.1039485-2-zhanjie9@hisilicon.com>
X-Mailer: git-send-email 2.30.0
In-Reply-To: <20240929033214.1039485-1-zhanjie9@hisilicon.com>
References: <20240929033214.1039485-1-zhanjie9@hisilicon.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain
X-Originating-IP: [10.90.30.45]
X-ClientProxiedBy: dggems703-chm.china.huawei.com (10.3.19.180) To  dggpeml500019.china.huawei.com (7.185.36.137)
Content-Length: 3850
Lines: 116

The CPPC performance feedback counters could be 0 or unchanged when the
target cpu is in a low-power idle state, e.g. power-gated or clock-gated.

When the counters are 0, cppc_cpufreq_get_rate() returns 0 KHz, which makes
cpufreq_online() get a false error and fail to generate a cpufreq policy.

When the counters are unchanged, the existing cppc_perf_from_fbctrs()
returns a cached desired perf, but some platforms may update the real
frequency back to the desired perf reg.

For the above cases in cppc_cpufreq_get_rate(), get the latest desired perf
from the CPPC reg to reflect the frequency because some platforms may
update the actual frequency back there; if failed, use the cached desired
perf.

Fixes: 6a4fec4f6d30 ("cpufreq: cppc: cppc_cpufreq_get_rate() returns zero in all error cases.")
Signed-off-by: Jie Zhan <zhanjie9@hisilicon.com>
Reviewed-by: Zeng Heng <zengheng4@huawei.com>
Reviewed-by: Ionela Voinescu <ionela.voinescu@arm.com>
Reviewed-by: Huisong Li <lihuisong@huawei.com>
---
 drivers/cpufreq/cppc_cpufreq.c | 57 +++++++++++++++++++++++++++-------
 1 file changed, 46 insertions(+), 11 deletions(-)

diff --git a/drivers/cpufreq/cppc_cpufreq.c b/drivers/cpufreq/cppc_cpufreq.c
index 1a5ad184d28f..646b466002c6 100644
--- a/drivers/cpufreq/cppc_cpufreq.c
+++ b/drivers/cpufreq/cppc_cpufreq.c
@@ -118,6 +118,9 @@ static void cppc_scale_freq_workfn(struct kthread_work *work)
 
 	perf = cppc_perf_from_fbctrs(cpu_data, &cppc_fi->prev_perf_fb_ctrs,
 				     &fb_ctrs);
+	if (!perf)
+		return;
+
 	cppc_fi->prev_perf_fb_ctrs = fb_ctrs;
 
 	perf <<= SCHED_CAPACITY_SHIFT;
@@ -724,13 +727,31 @@ static int cppc_perf_from_fbctrs(struct cppc_cpudata *cpu_data,
 	delta_delivered = get_delta(fb_ctrs_t1->delivered,
 				    fb_ctrs_t0->delivered);
 
-	/* Check to avoid divide-by zero and invalid delivered_perf */
+	/*
+	 * Avoid divide-by zero and unchanged feedback counters.
+	 * Leave it for callers to handle.
+	 */
 	if (!delta_reference || !delta_delivered)
-		return cpu_data->perf_ctrls.desired_perf;
+		return 0;
 
 	return (reference_perf * delta_delivered) / delta_reference;
 }
 
+static int cppc_get_perf_ctrs_sample(int cpu,
+				     struct cppc_perf_fb_ctrs *fb_ctrs_t0,
+				     struct cppc_perf_fb_ctrs *fb_ctrs_t1)
+{
+	int ret;
+
+	ret = cppc_get_perf_ctrs(cpu, fb_ctrs_t0);
+	if (ret)
+		return ret;
+
+	udelay(2); /* 2usec delay between sampling */
+
+	return cppc_get_perf_ctrs(cpu, fb_ctrs_t1);
+}
+
 static unsigned int cppc_cpufreq_get_rate(unsigned int cpu)
 {
 	struct cppc_perf_fb_ctrs fb_ctrs_t0 = {0}, fb_ctrs_t1 = {0};
@@ -746,18 +767,32 @@ static unsigned int cppc_cpufreq_get_rate(unsigned int cpu)
 
 	cpufreq_cpu_put(policy);
 
-	ret = cppc_get_perf_ctrs(cpu, &fb_ctrs_t0);
-	if (ret)
-		return 0;
-
-	udelay(2); /* 2usec delay between sampling */
-
-	ret = cppc_get_perf_ctrs(cpu, &fb_ctrs_t1);
-	if (ret)
-		return 0;
+	ret = cppc_get_perf_ctrs_sample(cpu, &fb_ctrs_t0, &fb_ctrs_t1);
+	if (ret) {
+		if (ret == -EFAULT)
+			/* Any of the associated CPPC regs is 0. */
+			goto out_invalid_counters;
+		else
+			return 0;
+	}
 
 	delivered_perf = cppc_perf_from_fbctrs(cpu_data, &fb_ctrs_t0,
 					       &fb_ctrs_t1);
+	if (!delivered_perf)
+		goto out_invalid_counters;
+
+	return cppc_perf_to_khz(&cpu_data->perf_caps, delivered_perf);
+
+out_invalid_counters:
+	/*
+	 * Feedback counters could be unchanged or 0 when a cpu enters a
+	 * low-power idle state, e.g. clock-gated or power-gated.
+	 * Use desired perf for reflecting frequency.  Get the latest register
+	 * value first as some platforms may update the actual delivered perf
+	 * there; if failed, resort to the cached desired perf.
+	 */
+	if (cppc_get_desired_perf(cpu, &delivered_perf))
+		delivered_perf = cpu_data->perf_ctrls.desired_perf;
 
 	return cppc_perf_to_khz(&cpu_data->perf_caps, delivered_perf);
 }
-- 
2.33.0

