From vireshk  Mon Jun 27 11:01:19 2022
Delivered-To: viresh.kumar@linaro.org
Received: from pop.gmail.com [142.251.12.108] 	by vireshk-i7 with POP3 (fetchmail-6.4.2) 	for <vireshk@localhost> (single-drop); Mon, 27 Jun 2022 11:01:19 +0530 (IST)
Received: by 2002:a59:ad12:0:b0:2c5:8d2:9a68 with SMTP id w18csp894161vqy;         Fri, 24 Jun 2022 15:13:54 -0700 (PDT)
X-Received: by 2002:a63:d853:0:b0:40d:6ea0:74d6 with SMTP id k19-20020a63d853000000b0040d6ea074d6mr898962pgj.26.1656108834582;         Fri, 24 Jun 2022 15:13:54 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; t=1656108834; cv=none;         d=google.com; s=arc-20160816;         b=xkAMO+MkNXPi9bOLK6XzUyHytL9TqBIU+HDv9bNLskm1NMEbA6Q/1g9f4ay2woBhjE          zNovs0Ku/6yIbIVvNKw0ijeQiuDkRmB3w3LO56rAMErDoj+Ur7RozbjgtF327dDUA3kV          +6iS+rwBoQoFzz3tJ7p9EweC71JVsA8nZkz//EMjg3REjtPT34/N6k21YdRwqaLbaAHw          MlMKjC9joaq7ggl8roXZaAF2v6mmoJEsAn28vc86ukHZG11gE2JufFSkRTAQLThQx59k          bTVa6bv3qpwKr2H7BytmPIfHbeysYPKZJ+0uy+yhfNzYZqlL2LgpEGzOrrpVLtrtQjcQ          OIBg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;         h=content-transfer-encoding:mime-version:message-id:date:subject:cc          :to:from:dkim-signature;         bh=HuUtP1pyPSxgklZrPyqyb5Jke10nHWceVls2IntODPM=;         b=Rr+RUAggKKyRty8NsnBFEwmiJmv3R+5QEZ1KrDeS5AVgU3orUTfdWKXdYhQqrDIAfa          fN1h/7uzr4j91UgxteRkE+Kn3FsQFPtN7bG+A6shhs9G/e3upbnfIOVVJgwpsHtEFVDJ          2XNzHUOdVUGfC5TRvV0raej/5Igbl+wkzppp9c6pk3ZVLCylDio1TSy7YRBjAHAtQniz          9Qg8rK6oILfneJ9cn3s9vWibMhznGKyD3G7OLfkttHWUBVOJUO377yKB2jIRGnvhynsy          +d6G6mpQHr0z9mI6rUVKU2PZRQ0oKQv+wdj1/nuckQCF2pq1jwUXghufaHxql03ME5h/          ot1w==
ARC-Authentication-Results: i=1; mx.google.com;        dkim=pass header.i=@linaro.org header.s=google header.b=PcRfHfzk;        spf=pass (google.com: domain of mathieu.poirier@linaro.org designates 209.85.220.41 as permitted sender) smtp.mailfrom=mathieu.poirier@linaro.org;        dmarc=pass (p=NONE sp=NONE dis=NONE) header.from=linaro.org
Return-Path: <mathieu.poirier@linaro.org>
Received: from mail-sor-f41.google.com (mail-sor-f41.google.com. [209.85.220.41])         by mx.google.com with SMTPS id p6-20020a170902e74600b00169c54f6d14sor1545030plf.33.2022.06.24.15.13.54         for <viresh.kumar@linaro.org>         (Google Transport Security);         Fri, 24 Jun 2022 15:13:54 -0700 (PDT)
Received-SPF: pass (google.com: domain of mathieu.poirier@linaro.org designates 209.85.220.41 as permitted sender) client-ip=209.85.220.41;
Authentication-Results: mx.google.com;        dkim=pass header.i=@linaro.org header.s=google header.b=PcRfHfzk;        spf=pass (google.com: domain of mathieu.poirier@linaro.org designates 209.85.220.41 as permitted sender) smtp.mailfrom=mathieu.poirier@linaro.org;        dmarc=pass (p=NONE sp=NONE dis=NONE) header.from=linaro.org
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;         d=linaro.org; s=google;         h=from:to:cc:subject:date:message-id:mime-version          :content-transfer-encoding;         bh=HuUtP1pyPSxgklZrPyqyb5Jke10nHWceVls2IntODPM=;         b=PcRfHfzk796IOBDwnioGnEXgbO3a0GnZamyuYFrl6GqzzSQ3Yp387SjCrSXkpXjM2w          1Wyg1wLO21sr+mhLIDWpBGYaecdSGmUGitRrTdRrzLqxdBWAVFO1v7HfB9TzuJEbV/gU          dFPViV0hHPvRHGl3dzUMn6z7tLf6qaTR0Xojt3gHRhbCUEcreuR7IeCYcaKXxXLHtxmZ          uX6AUN5l8+kmGc2DAT6451XSRIq3tDRFSt5htkGpzs3W8TrSz/uZ9y5JCZVS/GqLSzZ3          ez7rMYUfe4CN21plRRHR/1Bu2HQjnCimPCoq0/7gFO8njrlg9khYJ+FGOWmzmAdJKyvs          Vrlg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;         d=1e100.net; s=20210112;         h=x-gm-message-state:from:to:cc:subject:date:message-id:mime-version          :content-transfer-encoding;         bh=HuUtP1pyPSxgklZrPyqyb5Jke10nHWceVls2IntODPM=;         b=kF4PYunlYR+NLgkamKYURzViu6FOSUXD5VEYXZjJb4l4wyAW78zXBNMvQnWlsowfeZ          KX5hFW++qRR4hvR/jdS52CTIcwr7vkL/Be9tyaSVCJco5B3hN1LTRxfQ9Nl2GZQoiOmL          jfJ81Y2YgVQuBbcUCy2ctIT6gHqv1wYYqjLOHQNZpN/1Gj0jf5bFhLzQE5jKXhOOgaXG          1S+z5aYFlXzVGLleCazJxfLe6iieRVupWHVAws82vLK92V7lkhLbghrh8Ow+yrrCv0rO          39CWQMNcFGgmozZy0IBGTi5LcxS97UfWpYJdKNyPCrkt4Nw03orNyjJhkTuieYcU9yX+          h3tw==
X-Gm-Message-State: AJIora/jiTzNx0e+Iwgh1qJvYo4diZ+XZ0pDH44j4ulo6XQA+WBdBaop 	NcCAUJmbE9xMqtGIgS62TbEaCm17U+xSzIGR
X-Google-Smtp-Source: AGRyM1vZEUKQqzJNw7aN2vw2DNUXsgPE5jaXUgdh8HUZMEBSdPOdZCgh4L/gBvrpxDdUj1T8DekgyA==
X-Received: by 2002:a17:902:8690:b0:16a:61e9:b9ca with SMTP id g16-20020a170902869000b0016a61e9b9camr1299706plo.126.1656108833459;         Fri, 24 Jun 2022 15:13:53 -0700 (PDT)
Return-Path: <mathieu.poirier@linaro.org>
Received: from p14s.cg.shawcable.net (S0106889e681aac74.cg.shawcable.net. [68.147.0.187])         by smtp.gmail.com with ESMTPSA id ll11-20020a17090b21cb00b001ec86a0490csm2259179pjb.32.2022.06.24.15.13.51         (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);         Fri, 24 Jun 2022 15:13:52 -0700 (PDT)
From: Mathieu Poirier <mathieu.poirier@linaro.org>
To: viresh.kumar@linaro.org
Cc: mathieu.poirier@linaro.org
Subject: [PATCH] xdm: Move to xen-sys device model API
Date: Fri, 24 Jun 2022 16:13:50 -0600
Message-Id: <20220624221350.1772848-1-mathieu.poirier@linaro.org>
X-Mailer: git-send-email 2.25.1
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Length: 7445
Lines: 240

Signed-off-by: Mathieu Poirier <mathieu.poirier@linaro.org>
---

Applies cleanly on your main branch (cf35c0a223d7).

---
 Cargo.lock |   2 +-
 src/xdm.rs | 143 ++++++++++++++++++-----------------------------------
 2 files changed, 49 insertions(+), 96 deletions(-)

diff --git a/Cargo.lock b/Cargo.lock
index d6e6e6c8e899..2ce02dbcee73 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -435,7 +435,7 @@ checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
 [[package]]
 name = "xen-ioctls"
 version = "0.0.0-pre1"
-source = "git+https://gitlab.com/mathieupoirier/oxerun/?branch=xen-ioctls#69d3684d69032abb490591c23a5b9b44af6d8638"
+source = "git+https://gitlab.com/mathieupoirier/oxerun/?branch=xen-ioctls#e9f1b6301ce6763abdc405fef3e8aa949bb129e4"
 dependencies = [
  "libc",
  "vmm-sys-util",
diff --git a/src/xdm.rs b/src/xdm.rs
index 73f52c924d24..a7d66adff643 100644
--- a/src/xdm.rs
+++ b/src/xdm.rs
@@ -4,52 +4,40 @@
 // SPDX-License-Identifier: Apache-2.0
 
 use super::{Error, Result};
-use libxen_sys::{
-    domid_t, ioservid_t, xendevicemodel_close, xendevicemodel_create_ioreq_server,
-    xendevicemodel_destroy_ioreq_server, xendevicemodel_handle,
-    xendevicemodel_map_io_range_to_ioreq_server, xendevicemodel_nr_vcpus, xendevicemodel_open,
-    xendevicemodel_set_ioreq_server_state, xendevicemodel_set_irq_level,
-    xendevicemodel_unmap_io_range_from_ioreq_server, xentoollog_logger, HVM_IOREQSRV_BUFIOREQ_OFF,
-};
+use xen_ioctls::{XenDeviceModelHandle, HVM_IOREQSRV_BUFIOREQ_OFF};
 
 pub const VIRTIO_IRQ_HIGH: u32 = 1;
 
 pub struct XenDeviceModel {
-    xdh: *mut xendevicemodel_handle,
-    id: Option<ioservid_t>,
-    domid: domid_t,
+    xdmh: XenDeviceModelHandle,
+    id: Option<u16>,
+    domid: u16,
     vcpus: u32,
     map_range: Option<(u64, u64)>,
 }
 
 impl XenDeviceModel {
-    pub fn new(domid: domid_t) -> Result<Self> {
-        let xdh = unsafe { xendevicemodel_open(std::ptr::null_mut::<xentoollog_logger>(), 0) };
-
-        if xdh.is_null() {
-            return Err(Error::XenDeviceModelFailure);
-        }
+    pub fn new(domid: u16) -> Result<Self> {
+        let xdmh = XenDeviceModelHandle::new().map_err(|_| Error::XenDeviceModelFailure)?;
 
         // Create the domain struct earlier so Drop can be called in case of errors.
         let mut xdm = Self {
-            xdh,
+            xdmh,
             id: None,
             domid,
             vcpus: 0,
             map_range: None,
         };
 
-        let mut num = 0;
-        let ret = unsafe { xendevicemodel_nr_vcpus(xdm.xdh, domid, &mut num) };
-        if ret < 0 {
-            return Err(Error::XenDeviceModelFailure);
-        }
+        xdm.vcpus = xdm
+            .xdmh
+            .nr_vcpus(domid)
+            .map_err(|_| Error::XenDeviceModelFailure)?;
 
-        xdm.vcpus = num;
         Ok(xdm)
     }
 
-    pub fn ioserver_id(&self) -> ioservid_t {
+    pub fn ioserver_id(&self) -> u16 {
         self.id.unwrap()
     }
 
@@ -58,22 +46,15 @@ impl XenDeviceModel {
     }
 
     pub fn create_ioreq_server(&mut self) -> Result<()> {
-        let mut id = 0;
-
-        let ret = unsafe {
-            xendevicemodel_create_ioreq_server(
-                self.xdh,
-                self.domid,
-                HVM_IOREQSRV_BUFIOREQ_OFF as i32,
-                &mut id,
+        self.xdmh
+            .create_ioreq_server(self.domid, HVM_IOREQSRV_BUFIOREQ_OFF as u8)
+            .map_or_else(
+                |_| Err(Error::XenDeviceModelFailure),
+                |id| {
+                    self.id = Some(id);
+                    Ok(())
+                },
             )
-        };
-        if ret < 0 {
-            Err(Error::XenDeviceModelFailure)
-        } else {
-            self.id = Some(id);
-            Ok(())
-        }
     }
 
     fn destroy_ioreq_server(&mut self) -> Result<()> {
@@ -81,76 +62,52 @@ impl XenDeviceModel {
             return Ok(());
         }
 
-        let ret = unsafe {
-            xendevicemodel_destroy_ioreq_server(self.xdh, self.domid, self.ioserver_id())
-        };
-        if ret < 0 {
-            Err(Error::XenDeviceModelFailure)
-        } else {
-            self.id = None;
-            Ok(())
-        }
+        self.xdmh
+            .destroy_ioreq_server(self.domid, self.ioserver_id())
+            .map_or_else(
+                |_| Err(Error::XenDeviceModelFailure),
+                |_| {
+                    self.id = None;
+                    Ok(())
+                },
+            )
     }
 
     pub fn set_ioreq_server_state(&self, enabled: i32) -> Result<()> {
-        let ret = unsafe {
-            xendevicemodel_set_ioreq_server_state(self.xdh, self.domid, self.ioserver_id(), enabled)
-        };
-        if ret < 0 {
-            Err(Error::XenDeviceModelFailure)
-        } else {
-            Ok(())
-        }
+        self.xdmh
+            .set_ioreq_server_state(self.domid, self.ioserver_id(), enabled)
+            .map_err(|_| Error::XenDeviceModelFailure)
     }
 
     pub fn map_io_range_to_ioreq_server(&mut self, start: u64, size: u64) -> Result<()> {
         let end = start + size - 1;
-        let ret = unsafe {
-            xendevicemodel_map_io_range_to_ioreq_server(
-                self.xdh,
-                self.domid,
-                self.ioserver_id(),
-                1,
-                start,
-                end,
+
+        self.xdmh
+            .map_io_range_to_ioreq_server(self.domid, self.ioserver_id(), 1, start, end)
+            .map_or_else(
+                |_| Err(Error::XenDeviceModelFailure),
+                |_| {
+                    self.map_range = Some((start, end));
+                    Ok(())
+                },
             )
-        };
-        if ret < 0 {
-            Err(Error::XenDeviceModelFailure)
-        } else {
-            self.map_range = Some((start, end));
-            Ok(())
-        }
     }
 
     fn ummap_io_range_from_ioreq_server(&self) -> Result<()> {
         if let Some((start, end)) = self.map_range {
-            let ret = unsafe {
-                xendevicemodel_unmap_io_range_from_ioreq_server(
-                    self.xdh,
-                    self.domid,
-                    self.ioserver_id(),
-                    1,
-                    start,
-                    end,
-                )
-            };
-            if ret < 0 {
-                return Err(Error::XenDeviceModelFailure);
-            }
+            return self
+                .xdmh
+                .unmap_io_range_from_ioreq_server(self.domid, self.ioserver_id(), 1, start, end)
+                .map_err(|_| Error::XenDeviceModelFailure);
         }
 
         Ok(())
     }
 
     pub fn set_irq(&self, irq: u32) -> Result<()> {
-        let ret =
-            unsafe { xendevicemodel_set_irq_level(self.xdh, self.domid, irq, VIRTIO_IRQ_HIGH) };
-        if ret < 0 {
-            Err(Error::XenDeviceModelFailure)
-        } else {
-            Ok(())
-        }
+        self.xdmh
+            .set_irq_level(self.domid, irq, VIRTIO_IRQ_HIGH)
+            .map_err(|_| Error::XenDeviceModelFailure)
     }
 }
 
@@ -159,9 +116,5 @@ impl Drop for XenDeviceModel {
         self.ummap_io_range_from_ioreq_server().unwrap();
         self.set_ioreq_server_state(0).unwrap();
         self.destroy_ioreq_server().unwrap();
-
-        unsafe {
-            xendevicemodel_close(self.xdh);
-        }
     }
 }
-- 
2.25.1

