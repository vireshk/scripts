From vireshk  Fri Dec 15 16:52:07 2023
Return-Path: <viresh.kumar@linaro.org>
Received: from pop.gmail.com [74.125.68.108] 	by vireshk-i7 with POP3 (fetchmail-6.4.2) 	for <vireshk@localhost> (single-drop); Fri, 15 Dec 2023 16:52:07 +0530 (IST)
Received: from localhost ([122.172.82.6])         by smtp.gmail.com with ESMTPSA id ji3-20020a170903324300b001cfd35ec1d7sm3517326plb.243.2023.12.15.03.21.22         (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);         Fri, 15 Dec 2023 03:21:22 -0800 (PST)
From: Viresh Kumar <viresh.kumar@linaro.org>
To: private-kwg@linaro.org
Cc: Viresh Kumar <viresh.kumar@linaro.org>, 	=?UTF-8?q?Alex=20Benn=C3=A9e?= <alex.bennee@linaro.org>
Subject: [Weekly] Week ending 2023-12-15
Date: Fri, 15 Dec 2023 16:50:23 +0530
Message-Id: <20231215112023.1000608-1-viresh.kumar@linaro.org>
X-Mailer: git-send-email 2.31.1.272.g89b43f80a514
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Status: R

[UM-401]
# Header: Rewrite OPP core in Rust
# Type: Sub-task
# Status: In Progress
- Sent a new version of the rustupoverride patch to LKML

- Initially I was looking to rewrite part of the OPP core in Rust, which would
  be called from C code. Which I realized now won't be very easy, especially
  that we are in the very beginning of the whole Rust thing.

- The best and the easiest thing to do for now would be provide Rust bindings
  for the OPP core, so a Rust based driver can use them.

- One good idea here can be to rewrite the cpufreq-dt driver in Rust and let it
  use OPP core's Rust bindings.

- Started working on the Rust bindings for the OPP core. This also aligns with
  what everyone else is doing with Rust in Kernel.

- Maybe once this is in place, I can re-look at the initial idea of writing some
  of the OPP core parts in Rust.

[UM-363]
# Header: Maintainership: Libgpiod rust bindings
# Type: Story
# Status: Open


[UM-188]
# Header: Maintainership: Rust vhost-device crate
# Type: Story
# Status: In Progress
- No updates.

[UM-21]
# Header: Maintainership: cpufreq
# Type: Story
# Status: In Progress
- Reviewed Vincent's cpufreq changes.
- Reviewed some Risc-V changes.

[UM-20]
# Header: Maintainership: OPP
# Type: Story
# Status: In Progress
- No updates.

[ORKO-120]
# Header: Review and support the up-streaming of the externally written daemon into the rust-vmm/vhost-device repo
# Type: Story
# Status: Open


[ORKO-117]
# Header: Help with review of the virtio-spi Linux kernel driver
# Type: Story
Status: In Progress
- Reviewed the RFC patchset in detail.

- Found lots of issues, going well.

- Created a card for Haixu (Qcom) to write a vhost-device backend.

[ORKO-96]
# Header: Properly summarize the requirements for a VirtIO transport
# Type: Story
# Status: In Progress
- Waiting for more feedback from the list.

[ORKO-80]
# Header: Upstream vhost-user-frontend
# Type: Epic
# Status: Open


[ORKO-9]
# Header: Prepare the testing framework for VirtIO
# Type: Epic
# Status: Open

